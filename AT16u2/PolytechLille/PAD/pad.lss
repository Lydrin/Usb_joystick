
pad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000abc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004275  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb5  00000000  00000000  00004fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029a3  00000000  00000000  00005f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  00008918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b19  00000000  00000000  00008f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029af  00000000  00000000  0000aa85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000d434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6c c0       	rjmp	.+216    	; 0xda <__ctors_end>
   2:	00 00       	nop
   4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
   6:	00 00       	nop
   8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
   a:	00 00       	nop
   c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
   e:	00 00       	nop
  10:	7f c0       	rjmp	.+254    	; 0x110 <__bad_interrupt>
  12:	00 00       	nop
  14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
  16:	00 00       	nop
  18:	7b c0       	rjmp	.+246    	; 0x110 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
  1e:	00 00       	nop
  20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
  22:	00 00       	nop
  24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>
  26:	00 00       	nop
  28:	73 c0       	rjmp	.+230    	; 0x110 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f8 c2       	rjmp	.+1520   	; 0x61e <__vector_11>
  2e:	00 00       	nop
  30:	6f c0       	rjmp	.+222    	; 0x110 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__bad_interrupt>
  36:	00 00       	nop
  38:	6b c0       	rjmp	.+214    	; 0x110 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	69 c0       	rjmp	.+210    	; 0x110 <__bad_interrupt>
  3e:	00 00       	nop
  40:	67 c0       	rjmp	.+206    	; 0x110 <__bad_interrupt>
  42:	00 00       	nop
  44:	65 c0       	rjmp	.+202    	; 0x110 <__bad_interrupt>
  46:	00 00       	nop
  48:	63 c0       	rjmp	.+198    	; 0x110 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	61 c0       	rjmp	.+194    	; 0x110 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5f c0       	rjmp	.+190    	; 0x110 <__bad_interrupt>
  52:	00 00       	nop
  54:	5d c0       	rjmp	.+186    	; 0x110 <__bad_interrupt>
  56:	00 00       	nop
  58:	5b c0       	rjmp	.+182    	; 0x110 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	59 c0       	rjmp	.+178    	; 0x110 <__bad_interrupt>
  5e:	00 00       	nop
  60:	57 c0       	rjmp	.+174    	; 0x110 <__bad_interrupt>
  62:	00 00       	nop
  64:	55 c0       	rjmp	.+170    	; 0x110 <__bad_interrupt>
  66:	00 00       	nop
  68:	53 c0       	rjmp	.+166    	; 0x110 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	51 c0       	rjmp	.+162    	; 0x110 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4f c0       	rjmp	.+158    	; 0x110 <__bad_interrupt>
  72:	00 00       	nop

00000074 <PAD_SerialString>:
  74:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00           ..0.0.0.0.1...

00000082 <PAD_ProductString>:
  82:	08 03 50 00 41 00 44 00 00 00                       ..P.A.D...

0000008c <PAD_ManufacturerString>:
  8c:	0c 03 53 00 49 00 53 00 50 00 4d 00 00 00           ..S.I.S.P.M...

0000009a <PAD_LanguageString>:
  9a:	04 03 09 04                                         ....

0000009e <PAD_ConfigurationDescriptor>:
  9e:	09 02 29 00 02 01 00 80 fa 09 04 00 00 01 ff 00     ..).............
  ae:	00 00 07 05 81 03 08 00 05 09 04 01 00 01 ff 00     ................
  be:	00 00 07 05 02 03 08 00 05                          .........

000000c7 <PAD_DeviceDescriptor>:
  c7:	12 01 10 01 ff 00 00 08 b4 04 11 fd 00 02 01 02     ................
  d7:	03 01 00                                            ...

000000da <__ctors_end>:
  da:	11 24       	eor	r1, r1
  dc:	1f be       	out	0x3f, r1	; 63
  de:	cf ef       	ldi	r28, 0xFF	; 255
  e0:	d2 e0       	ldi	r29, 0x02	; 2
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a0 e0       	ldi	r26, 0x00	; 0
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	e8 e4       	ldi	r30, 0x48	; 72
  ee:	fa e0       	ldi	r31, 0x0A	; 10
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
  f2:	05 90       	lpm	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	a0 30       	cpi	r26, 0x00	; 0
  f8:	b1 07       	cpc	r27, r17
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
 104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
 106:	ac 30       	cpi	r26, 0x0C	; 12
 108:	b2 07       	cpc	r27, r18
 10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
 10c:	73 d0       	rcall	.+230    	; 0x1f4 <main>
 10e:	9a c4       	rjmp	.+2356   	; 0xa44 <_exit>

00000110 <__bad_interrupt>:
 110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 112:	42 e0       	ldi	r20, 0x02	; 2
 114:	61 ec       	ldi	r22, 0xC1	; 193
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	b9 d1       	rcall	.+882    	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
 11a:	42 e0       	ldi	r20, 0x02	; 2
 11c:	60 ec       	ldi	r22, 0xC0	; 192
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	b5 d1       	rcall	.+874    	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 122:	e2 ee       	ldi	r30, 0xE2	; 226
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <ProcessLEDReport>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 12e:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 132:	95 ff       	sbrs	r25, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <ProcessLEDReport>
				UDR1 = DataByte;
 136:	80 93 ce 00 	sts	0x00CE, r24
 13a:	08 95       	ret

0000013c <SendNextReport>:
	// Envoyer en série 0 ou 1 selon la data
	Serial_SendByte(data);
}
 
void SendNextReport(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
 146:	80 91 c8 00 	lds	r24, 0x00C8
	// Fonction pour lire sur le port série et stocker la valeur (pointeur)
	
	uint8_t data;
	if(Serial_IsCharReceived())
 14a:	87 ff       	sbrs	r24, 7
 14c:	0a c0       	rjmp	.+20     	; 0x162 <SendNextReport+0x26>
 14e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
 152:	87 ff       	sbrs	r24, 7
 154:	03 c0       	rjmp	.+6      	; 0x15c <SendNextReport+0x20>
				  return -1;

				return UDR1;
 156:	80 91 ce 00 	lds	r24, 0x00CE
 15a:	02 c0       	rjmp	.+4      	; 0x160 <SendNextReport+0x24>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9f ef       	ldi	r25, 0xFF	; 255
	{
		data = Serial_ReceiveByte(); //
 160:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 168:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(PAD_IN_EPADDR);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed())
 16c:	85 ff       	sbrs	r24, 5
 16e:	0c c0       	rjmp	.+24     	; 0x188 <SendNextReport+0x4c>
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&data, sizeof(uint8_t), NULL);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	87 d0       	rcall	.+270    	; 0x28c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 17e:	80 91 e8 00 	lds	r24, 0x00E8
 182:	8e 77       	andi	r24, 0x7E	; 126
 184:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 196:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(PAD_OUT_EPADDR);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 19a:	82 ff       	sbrs	r24, 2
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <ReceiveNextReport+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 19e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 1a2:	85 ff       	sbrs	r24, 5
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 1a6:	80 91 f1 00 	lds	r24, 0x00F1
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_8();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 1aa:	c1 df       	rcall	.-126    	; 0x12e <ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1ac:	80 91 e8 00 	lds	r24, 0x00E8
 1b0:	8b 77       	andi	r24, 0x7B	; 123
 1b2:	80 93 e8 00 	sts	0x00E8, r24
 1b6:	08 95       	ret

000001b8 <PAD_Task>:
}

void PAD_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1b8:	8e b3       	in	r24, 0x1e	; 30
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <PAD_Task+0xa>
		return;

	/* Send the next keypress report to the host */
	SendNextReport();
 1be:	be df       	rcall	.-132    	; 0x13c <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 1c0:	e7 cf       	rjmp	.-50     	; 0x190 <ReceiveNextReport>
 1c2:	08 95       	ret

000001c4 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the project's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1c4:	84 b7       	in	r24, 0x34	; 52
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	a8 95       	wdr
 1d0:	80 91 60 00 	lds	r24, 0x0060
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 93 60 00 	sts	0x0060, r24
 1da:	10 92 60 00 	sts	0x0060, r1
 1de:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	80 93 61 00 	sts	0x0061, r24
 1ec:	90 93 61 00 	sts	0x0061, r25
 1f0:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	USB_Init();
 1f2:	06 c2       	rjmp	.+1036   	; 0x600 <USB_Init>

000001f4 <main>:
	ReceiveNextReport();
}
 
int main(void)
{
	SetupHardware();
 1f4:	e7 df       	rcall	.-50     	; 0x1c4 <SetupHardware>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 cd 00 	sts	0x00CD, r25
 1fe:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 208:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 20c:	88 e1       	ldi	r24, 0x18	; 24
 20e:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
 212:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 214:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 216:	78 94       	sei
	Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);
	GlobalInterruptEnable();

	for (;;)
	  PAD_Task();
 218:	cf df       	rcall	.-98     	; 0x1b8 <PAD_Task>
 21a:	fe cf       	rjmp	.-4      	; 0x218 <main+0x24>

0000021c <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 21c:	29 2f       	mov	r18, r25
 21e:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 220:	22 30       	cpi	r18, 0x02	; 2
 222:	31 05       	cpc	r19, r1
 224:	59 f0       	breq	.+22     	; 0x23c <CALLBACK_USB_GetDescriptor+0x20>
 226:	23 30       	cpi	r18, 0x03	; 3
 228:	31 05       	cpc	r19, r1
 22a:	69 f0       	breq	.+26     	; 0x246 <CALLBACK_USB_GetDescriptor+0x2a>
 22c:	21 30       	cpi	r18, 0x01	; 1
 22e:	31 05       	cpc	r19, r1
 230:	29 f5       	brne	.+74     	; 0x27c <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 232:	82 e1       	ldi	r24, 0x12	; 18
 234:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
 236:	27 ec       	ldi	r18, 0xC7	; 199
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	24 c0       	rjmp	.+72     	; 0x284 <CALLBACK_USB_GetDescriptor+0x68>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 23c:	89 e2       	ldi	r24, 0x29	; 41
 23e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
 240:	2e e9       	ldi	r18, 0x9E	; 158
 242:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 244:	1f c0       	rjmp	.+62     	; 0x284 <CALLBACK_USB_GetDescriptor+0x68>
 246:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	71 f0       	breq	.+28     	; 0x26a <CALLBACK_USB_GetDescriptor+0x4e>
 24e:	2c f4       	brge	.+10     	; 0x25a <CALLBACK_USB_GetDescriptor+0x3e>
 250:	89 2b       	or	r24, r25
 252:	a1 f4       	brne	.+40     	; 0x27c <CALLBACK_USB_GetDescriptor+0x60>
			{
				case STRING_ID_Language:
					Address = &PAD_LanguageString;
					Size    = pgm_read_byte(&PAD_LanguageString.Header.Size);
 254:	ea e9       	ldi	r30, 0x9A	; 154
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	0d c0       	rjmp	.+26     	; 0x274 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	41 f0       	breq	.+16     	; 0x270 <CALLBACK_USB_GetDescriptor+0x54>
 260:	03 97       	sbiw	r24, 0x03	; 3
 262:	61 f4       	brne	.+24     	; 0x27c <CALLBACK_USB_GetDescriptor+0x60>
					Address = &PAD_ProductString;
					Size    = pgm_read_byte(&PAD_ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &PAD_SerialString;
					Size    = pgm_read_byte(&PAD_SerialString.Header.Size);
 264:	e4 e7       	ldi	r30, 0x74	; 116
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	05 c0       	rjmp	.+10     	; 0x274 <CALLBACK_USB_GetDescriptor+0x58>
					Address = &PAD_LanguageString;
					Size    = pgm_read_byte(&PAD_LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &PAD_ManufacturerString;
					Size    = pgm_read_byte(&PAD_ManufacturerString.Header.Size);
 26a:	ec e8       	ldi	r30, 0x8C	; 140
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <CALLBACK_USB_GetDescriptor+0x58>
					break;
				case STRING_ID_Product:
					Address = &PAD_ProductString;
					Size    = pgm_read_byte(&PAD_ProductString.Header.Size);
 270:	e2 e8       	ldi	r30, 0x82	; 130
 272:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Serial:
					Address = &PAD_SerialString;
					Size    = pgm_read_byte(&PAD_SerialString.Header.Size);
 274:	84 91       	lpm	r24, Z
 276:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Product:
					Address = &PAD_ProductString;
					Size    = pgm_read_byte(&PAD_ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &PAD_SerialString;
 278:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&PAD_SerialString.Header.Size);
					break;
 27a:	04 c0       	rjmp	.+8      	; 0x284 <CALLBACK_USB_GetDescriptor+0x68>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 284:	fa 01       	movw	r30, r20
 286:	31 83       	std	Z+1, r19	; 0x01
 288:	20 83       	st	Z, r18
	return Size;
}
 28a:	08 95       	ret

0000028c <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
 29e:	8b 01       	movw	r16, r22
 2a0:	7a 01       	movw	r14, r20
 2a2:	46 d1       	rcall	.+652    	; 0x530 <Endpoint_WaitUntilReady>
 2a4:	81 11       	cpse	r24, r1
 2a6:	33 c0       	rjmp	.+102    	; 0x30e <__stack+0xf>
 2a8:	e1 14       	cp	r14, r1
 2aa:	f1 04       	cpc	r15, r1
 2ac:	39 f0       	breq	.+14     	; 0x2bc <Endpoint_Write_Stream_LE+0x30>
 2ae:	f7 01       	movw	r30, r14
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	08 1b       	sub	r16, r24
 2b6:	19 0b       	sbc	r17, r25
 2b8:	c8 0f       	add	r28, r24
 2ba:	d9 1f       	adc	r29, r25
 2bc:	c1 2c       	mov	r12, r1
 2be:	d1 2c       	mov	r13, r1
 2c0:	01 15       	cp	r16, r1
 2c2:	11 05       	cpc	r17, r1
 2c4:	19 f1       	breq	.+70     	; 0x30c <__stack+0xd>
 2c6:	80 91 e8 00 	lds	r24, 0x00E8
 2ca:	85 fd       	sbrc	r24, 5
 2cc:	16 c0       	rjmp	.+44     	; 0x2fa <Endpoint_Write_Stream_LE+0x6e>
 2ce:	80 91 e8 00 	lds	r24, 0x00E8
 2d2:	8e 77       	andi	r24, 0x7E	; 126
 2d4:	80 93 e8 00 	sts	0x00E8, r24
 2d8:	9c d3       	rcall	.+1848   	; 0xa12 <USB_USBTask>
 2da:	e1 14       	cp	r14, r1
 2dc:	f1 04       	cpc	r15, r1
 2de:	49 f0       	breq	.+18     	; 0x2f2 <Endpoint_Write_Stream_LE+0x66>
 2e0:	f7 01       	movw	r30, r14
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	c8 0e       	add	r12, r24
 2e8:	d9 1e       	adc	r13, r25
 2ea:	d1 82       	std	Z+1, r13	; 0x01
 2ec:	c0 82       	st	Z, r12
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	0e c0       	rjmp	.+28     	; 0x30e <__stack+0xf>
 2f2:	1e d1       	rcall	.+572    	; 0x530 <Endpoint_WaitUntilReady>
 2f4:	88 23       	and	r24, r24
 2f6:	21 f3       	breq	.-56     	; 0x2c0 <Endpoint_Write_Stream_LE+0x34>
 2f8:	0a c0       	rjmp	.+20     	; 0x30e <__stack+0xf>
 2fa:	89 91       	ld	r24, Y+
 2fc:	80 93 f1 00 	sts	0x00F1, r24
 300:	01 50       	subi	r16, 0x01	; 1
 302:	11 09       	sbc	r17, r1
 304:	ff ef       	ldi	r31, 0xFF	; 255
 306:	cf 1a       	sub	r12, r31
 308:	df 0a       	sbc	r13, r31
 30a:	da cf       	rjmp	.-76     	; 0x2c0 <Endpoint_Write_Stream_LE+0x34>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	08 95       	ret

00000320 <Endpoint_Write_Control_Stream_LE>:
 320:	20 91 0a 01 	lds	r18, 0x010A
 324:	30 91 0b 01 	lds	r19, 0x010B
 328:	26 17       	cp	r18, r22
 32a:	37 07       	cpc	r19, r23
 32c:	48 f0       	brcs	.+18     	; 0x340 <Endpoint_Write_Control_Stream_LE+0x20>
 32e:	61 15       	cp	r22, r1
 330:	71 05       	cpc	r23, r1
 332:	39 f4       	brne	.+14     	; 0x342 <Endpoint_Write_Control_Stream_LE+0x22>
 334:	20 91 e8 00 	lds	r18, 0x00E8
 338:	2e 77       	andi	r18, 0x7E	; 126
 33a:	20 93 e8 00 	sts	0x00E8, r18
 33e:	01 c0       	rjmp	.+2      	; 0x342 <Endpoint_Write_Control_Stream_LE+0x22>
 340:	b9 01       	movw	r22, r18
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	61 15       	cp	r22, r1
 346:	71 05       	cpc	r23, r1
 348:	79 f1       	breq	.+94     	; 0x3a8 <Endpoint_Write_Control_Stream_LE+0x88>
 34a:	2e b3       	in	r18, 0x1e	; 30
 34c:	22 23       	and	r18, r18
 34e:	f1 f1       	breq	.+124    	; 0x3cc <Endpoint_Write_Control_Stream_LE+0xac>
 350:	25 30       	cpi	r18, 0x05	; 5
 352:	f1 f1       	breq	.+124    	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0xb0>
 354:	20 91 e8 00 	lds	r18, 0x00E8
 358:	23 fd       	sbrc	r18, 3
 35a:	3c c0       	rjmp	.+120    	; 0x3d4 <Endpoint_Write_Control_Stream_LE+0xb4>
 35c:	20 91 e8 00 	lds	r18, 0x00E8
 360:	22 fd       	sbrc	r18, 2
 362:	2e c0       	rjmp	.+92     	; 0x3c0 <Endpoint_Write_Control_Stream_LE+0xa0>
 364:	20 91 e8 00 	lds	r18, 0x00E8
 368:	20 ff       	sbrs	r18, 0
 36a:	ec cf       	rjmp	.-40     	; 0x344 <Endpoint_Write_Control_Stream_LE+0x24>
 36c:	20 91 f2 00 	lds	r18, 0x00F2
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	cf 01       	movw	r24, r30
 376:	61 15       	cp	r22, r1
 378:	71 05       	cpc	r23, r1
 37a:	59 f0       	breq	.+22     	; 0x392 <Endpoint_Write_Control_Stream_LE+0x72>
 37c:	28 30       	cpi	r18, 0x08	; 8
 37e:	31 05       	cpc	r19, r1
 380:	40 f4       	brcc	.+16     	; 0x392 <Endpoint_Write_Control_Stream_LE+0x72>
 382:	81 91       	ld	r24, Z+
 384:	80 93 f1 00 	sts	0x00F1, r24
 388:	61 50       	subi	r22, 0x01	; 1
 38a:	71 09       	sbc	r23, r1
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	f1 cf       	rjmp	.-30     	; 0x374 <Endpoint_Write_Control_Stream_LE+0x54>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	28 30       	cpi	r18, 0x08	; 8
 396:	31 05       	cpc	r19, r1
 398:	09 f0       	breq	.+2      	; 0x39c <Endpoint_Write_Control_Stream_LE+0x7c>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	20 91 e8 00 	lds	r18, 0x00E8
 3a0:	2e 77       	andi	r18, 0x7E	; 126
 3a2:	20 93 e8 00 	sts	0x00E8, r18
 3a6:	ce cf       	rjmp	.-100    	; 0x344 <Endpoint_Write_Control_Stream_LE+0x24>
 3a8:	41 11       	cpse	r20, r1
 3aa:	cf cf       	rjmp	.-98     	; 0x34a <Endpoint_Write_Control_Stream_LE+0x2a>
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <Endpoint_Write_Control_Stream_LE+0xa0>
 3ae:	8e b3       	in	r24, 0x1e	; 30
 3b0:	88 23       	and	r24, r24
 3b2:	61 f0       	breq	.+24     	; 0x3cc <Endpoint_Write_Control_Stream_LE+0xac>
 3b4:	85 30       	cpi	r24, 0x05	; 5
 3b6:	61 f0       	breq	.+24     	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0xb0>
 3b8:	80 91 e8 00 	lds	r24, 0x00E8
 3bc:	83 fd       	sbrc	r24, 3
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <Endpoint_Write_Control_Stream_LE+0xb4>
 3c0:	80 91 e8 00 	lds	r24, 0x00E8
 3c4:	82 ff       	sbrs	r24, 2
 3c6:	f3 cf       	rjmp	.-26     	; 0x3ae <Endpoint_Write_Control_Stream_LE+0x8e>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	08 95       	ret
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	08 95       	ret
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret

000003d8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 3d8:	20 91 0a 01 	lds	r18, 0x010A
 3dc:	30 91 0b 01 	lds	r19, 0x010B
 3e0:	26 17       	cp	r18, r22
 3e2:	37 07       	cpc	r19, r23
 3e4:	48 f0       	brcs	.+18     	; 0x3f8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3e6:	61 15       	cp	r22, r1
 3e8:	71 05       	cpc	r23, r1
 3ea:	39 f4       	brne	.+14     	; 0x3fa <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ec:	20 91 e8 00 	lds	r18, 0x00E8
 3f0:	2e 77       	andi	r18, 0x7E	; 126
 3f2:	20 93 e8 00 	sts	0x00E8, r18
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <Endpoint_Write_Control_PStream_LE+0x22>
 3f8:	b9 01       	movw	r22, r18
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3fe:	61 15       	cp	r22, r1
 400:	71 05       	cpc	r23, r1
 402:	61 f1       	breq	.+88     	; 0x45c <Endpoint_Write_Control_PStream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 404:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 406:	88 23       	and	r24, r24
 408:	d9 f1       	breq	.+118    	; 0x480 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 40a:	85 30       	cpi	r24, 0x05	; 5
 40c:	d9 f1       	breq	.+118    	; 0x484 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 40e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 412:	83 fd       	sbrc	r24, 3
 414:	39 c0       	rjmp	.+114    	; 0x488 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 416:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 41a:	82 fd       	sbrc	r24, 2
 41c:	2b c0       	rjmp	.+86     	; 0x474 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 41e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 422:	80 ff       	sbrs	r24, 0
 424:	ec cf       	rjmp	.-40     	; 0x3fe <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 426:	80 91 f2 00 	lds	r24, 0x00F2
 42a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 42c:	61 15       	cp	r22, r1
 42e:	71 05       	cpc	r23, r1
 430:	59 f0       	breq	.+22     	; 0x448 <Endpoint_Write_Control_PStream_LE+0x70>
 432:	88 30       	cpi	r24, 0x08	; 8
 434:	91 05       	cpc	r25, r1
 436:	40 f4       	brcc	.+16     	; 0x448 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 438:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 43a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 43e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 440:	61 50       	subi	r22, 0x01	; 1
 442:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	f2 cf       	rjmp	.-28     	; 0x42c <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	08 97       	sbiw	r24, 0x08	; 8
 44c:	09 f0       	breq	.+2      	; 0x450 <Endpoint_Write_Control_PStream_LE+0x78>
 44e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 450:	80 91 e8 00 	lds	r24, 0x00E8
 454:	8e 77       	andi	r24, 0x7E	; 126
 456:	80 93 e8 00 	sts	0x00E8, r24
 45a:	d1 cf       	rjmp	.-94     	; 0x3fe <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 45c:	21 11       	cpse	r18, r1
 45e:	d2 cf       	rjmp	.-92     	; 0x404 <Endpoint_Write_Control_PStream_LE+0x2c>
 460:	09 c0       	rjmp	.+18     	; 0x474 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 462:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 464:	88 23       	and	r24, r24
 466:	61 f0       	breq	.+24     	; 0x480 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 468:	85 30       	cpi	r24, 0x05	; 5
 46a:	61 f0       	breq	.+24     	; 0x484 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 46c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 470:	83 fd       	sbrc	r24, 3
 472:	0a c0       	rjmp	.+20     	; 0x488 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 474:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 478:	82 ff       	sbrs	r24, 2
 47a:	f3 cf       	rjmp	.-26     	; 0x462 <Endpoint_Write_Control_PStream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 488:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 48a:	08 95       	ret

0000048c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 48c:	98 2f       	mov	r25, r24
 48e:	95 30       	cpi	r25, 0x05	; 5
 490:	58 f5       	brcc	.+86     	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 492:	90 93 e9 00 	sts	0x00E9, r25
 496:	98 17       	cp	r25, r24
 498:	39 f0       	breq	.+14     	; 0x4a8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 49a:	70 91 ec 00 	lds	r23, 0x00EC
 49e:	20 91 ed 00 	lds	r18, 0x00ED
 4a2:	50 91 f0 00 	lds	r21, 0x00F0
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <Endpoint_ConfigureEndpoint_Prv+0x22>
 4a8:	24 2f       	mov	r18, r20
 4aa:	76 2f       	mov	r23, r22
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	21 ff       	sbrs	r18, 1
 4b0:	19 c0       	rjmp	.+50     	; 0x4e4 <Endpoint_ConfigureEndpoint_Prv+0x58>
 4b2:	30 91 eb 00 	lds	r19, 0x00EB
 4b6:	3e 7f       	andi	r19, 0xFE	; 254
 4b8:	30 93 eb 00 	sts	0x00EB, r19
 4bc:	30 91 ed 00 	lds	r19, 0x00ED
 4c0:	3d 7f       	andi	r19, 0xFD	; 253
 4c2:	30 93 ed 00 	sts	0x00ED, r19
 4c6:	30 91 eb 00 	lds	r19, 0x00EB
 4ca:	31 60       	ori	r19, 0x01	; 1
 4cc:	30 93 eb 00 	sts	0x00EB, r19
 4d0:	70 93 ec 00 	sts	0x00EC, r23
 4d4:	20 93 ed 00 	sts	0x00ED, r18
 4d8:	50 93 f0 00 	sts	0x00F0, r21
 4dc:	20 91 ee 00 	lds	r18, 0x00EE
 4e0:	27 ff       	sbrs	r18, 7
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <Endpoint_ConfigureEndpoint_Prv+0x66>
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	d3 cf       	rjmp	.-90     	; 0x48e <Endpoint_ConfigureEndpoint_Prv+0x2>
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	80 93 e9 00 	sts	0x00E9, r24
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4f6:	80 91 04 01 	lds	r24, 0x0104
 4fa:	87 ff       	sbrs	r24, 7
 4fc:	0f c0       	rjmp	.+30     	; 0x51c <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4fe:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 502:	82 fd       	sbrc	r24, 2
 504:	04 c0       	rjmp	.+8      	; 0x50e <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 506:	8e b3       	in	r24, 0x1e	; 30
 508:	81 11       	cpse	r24, r1
 50a:	f9 cf       	rjmp	.-14     	; 0x4fe <Endpoint_ClearStatusStage+0x8>
 50c:	10 c0       	rjmp	.+32     	; 0x52e <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 50e:	80 91 e8 00 	lds	r24, 0x00E8
 512:	8b 77       	andi	r24, 0x7B	; 123
 514:	0a c0       	rjmp	.+20     	; 0x52a <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 516:	8e b3       	in	r24, 0x1e	; 30
 518:	88 23       	and	r24, r24
 51a:	49 f0       	breq	.+18     	; 0x52e <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 51c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 520:	80 ff       	sbrs	r24, 0
 522:	f9 cf       	rjmp	.-14     	; 0x516 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 524:	80 91 e8 00 	lds	r24, 0x00E8
 528:	8e 77       	andi	r24, 0x7E	; 126
 52a:	80 93 e8 00 	sts	0x00E8, r24
 52e:	08 95       	ret

00000530 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 530:	20 91 e4 00 	lds	r18, 0x00E4
 534:	30 91 e5 00 	lds	r19, 0x00E5
 538:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 53a:	40 91 ec 00 	lds	r20, 0x00EC
 53e:	84 2f       	mov	r24, r20
 540:	81 70       	andi	r24, 0x01	; 1
 542:	40 ff       	sbrs	r20, 0
 544:	21 c0       	rjmp	.+66     	; 0x588 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 546:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 54a:	80 fd       	sbrc	r24, 0
 54c:	1b c0       	rjmp	.+54     	; 0x584 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 54e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 550:	88 23       	and	r24, r24
 552:	91 f0       	breq	.+36     	; 0x578 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 554:	85 30       	cpi	r24, 0x05	; 5
 556:	91 f0       	breq	.+36     	; 0x57c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 558:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 55c:	85 fd       	sbrc	r24, 5
 55e:	10 c0       	rjmp	.+32     	; 0x580 <Endpoint_WaitUntilReady+0x50>
 560:	40 91 e4 00 	lds	r20, 0x00E4
 564:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 568:	42 17       	cp	r20, r18
 56a:	53 07       	cpc	r21, r19
 56c:	31 f3       	breq	.-52     	; 0x53a <Endpoint_WaitUntilReady+0xa>
 56e:	9a 01       	movw	r18, r20
 570:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 572:	19 f7       	brne	.-58     	; 0x53a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 588:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 58c:	42 ff       	sbrs	r20, 2
 58e:	df cf       	rjmp	.-66     	; 0x54e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 590:	08 95       	ret

00000592 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 592:	3f d0       	rcall	.+126    	; 0x612 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 594:	41 d0       	rcall	.+130    	; 0x618 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 596:	80 91 d8 00 	lds	r24, 0x00D8
 59a:	8f 77       	andi	r24, 0x7F	; 127
 59c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 5a0:	80 91 d8 00 	lds	r24, 0x00D8
 5a4:	80 68       	ori	r24, 0x80	; 128
 5a6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5aa:	80 91 d8 00 	lds	r24, 0x00D8
 5ae:	8f 7d       	andi	r24, 0xDF	; 223
 5b0:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5b4:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5ba:	09 b4       	in	r0, 0x29	; 41
 5bc:	00 fe       	sbrs	r0, 0
 5be:	fd cf       	rjmp	.-6      	; 0x5ba <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5c0:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 5c2:	10 92 00 01 	sts	0x0100, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5c6:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5ca:	10 92 01 01 	sts	0x0101, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5ce:	42 e0       	ldi	r20, 0x02	; 2
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	5b df       	rcall	.-330    	; 0x48c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5d6:	80 91 e1 00 	lds	r24, 0x00E1
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5e0:	80 91 e2 00 	lds	r24, 0x00E2
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5ea:	80 91 e2 00 	lds	r24, 0x00E2
 5ee:	88 60       	ori	r24, 0x08	; 8
 5f0:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5f4:	80 91 e0 00 	lds	r24, 0x00E0
 5f8:	8e 7f       	andi	r24, 0xFE	; 254
 5fa:	80 93 e0 00 	sts	0x00E0, r24
 5fe:	08 95       	ret

00000600 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 600:	e3 e6       	ldi	r30, 0x63	; 99
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 03 01 	sts	0x0103, r24

	USB_ResetInterface();
 610:	c0 cf       	rjmp	.-128    	; 0x592 <USB_ResetInterface>

00000612 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 612:	10 92 e2 00 	sts	0x00E2, r1
 616:	08 95       	ret

00000618 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 618:	10 92 e1 00 	sts	0x00E1, r1
 61c:	08 95       	ret

0000061e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	3f 93       	push	r19
 62c:	4f 93       	push	r20
 62e:	5f 93       	push	r21
 630:	6f 93       	push	r22
 632:	7f 93       	push	r23
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	af 93       	push	r26
 63a:	bf 93       	push	r27
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 640:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 644:	82 ff       	sbrs	r24, 2
 646:	0a c0       	rjmp	.+20     	; 0x65c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 648:	80 91 e2 00 	lds	r24, 0x00E2
 64c:	82 ff       	sbrs	r24, 2
 64e:	06 c0       	rjmp	.+12     	; 0x65c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 650:	80 91 e1 00 	lds	r24, 0x00E1
 654:	8b 7f       	andi	r24, 0xFB	; 251
 656:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 65a:	da d1       	rcall	.+948    	; 0xa10 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 65c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 660:	80 ff       	sbrs	r24, 0
 662:	16 c0       	rjmp	.+44     	; 0x690 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 664:	80 91 e2 00 	lds	r24, 0x00E2
 668:	80 ff       	sbrs	r24, 0
 66a:	12 c0       	rjmp	.+36     	; 0x690 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 66c:	80 91 e2 00 	lds	r24, 0x00E2
 670:	8e 7f       	andi	r24, 0xFE	; 254
 672:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 676:	80 91 e2 00 	lds	r24, 0x00E2
 67a:	80 61       	ori	r24, 0x10	; 16
 67c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 680:	80 91 d8 00 	lds	r24, 0x00D8
 684:	80 62       	ori	r24, 0x20	; 32
 686:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 68a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 68c:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 68e:	c0 d1       	rcall	.+896    	; 0xa10 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 690:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 694:	84 ff       	sbrs	r24, 4
 696:	2d c0       	rjmp	.+90     	; 0x6f2 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 698:	80 91 e2 00 	lds	r24, 0x00E2
 69c:	84 ff       	sbrs	r24, 4
 69e:	29 c0       	rjmp	.+82     	; 0x6f2 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6a0:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6a6:	09 b4       	in	r0, 0x29	; 41
 6a8:	00 fe       	sbrs	r0, 0
 6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6ac:	80 91 d8 00 	lds	r24, 0x00D8
 6b0:	8f 7d       	andi	r24, 0xDF	; 223
 6b2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6b6:	80 91 e1 00 	lds	r24, 0x00E1
 6ba:	8f 7e       	andi	r24, 0xEF	; 239
 6bc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6c0:	80 91 e2 00 	lds	r24, 0x00E2
 6c4:	8f 7e       	andi	r24, 0xEF	; 239
 6c6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6ca:	80 91 e2 00 	lds	r24, 0x00E2
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6d4:	80 91 00 01 	lds	r24, 0x0100
 6d8:	88 23       	and	r24, r24
 6da:	11 f0       	breq	.+4      	; 0x6e0 <__vector_11+0xc2>
		  USB_DeviceState = DEVICE_STATE_Configured;
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <__vector_11+0xd0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6e0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6e4:	87 fd       	sbrc	r24, 7
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <__vector_11+0xce>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__vector_11+0xd0>
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6f0:	8f d1       	rcall	.+798    	; 0xa10 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6f2:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6f6:	83 ff       	sbrs	r24, 3
 6f8:	21 c0       	rjmp	.+66     	; 0x73c <__vector_11+0x11e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6fa:	80 91 e2 00 	lds	r24, 0x00E2
 6fe:	83 ff       	sbrs	r24, 3
 700:	1d c0       	rjmp	.+58     	; 0x73c <__vector_11+0x11e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 702:	80 91 e1 00 	lds	r24, 0x00E1
 706:	87 7f       	andi	r24, 0xF7	; 247
 708:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 710:	10 92 00 01 	sts	0x0100, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 714:	80 91 e1 00 	lds	r24, 0x00E1
 718:	8e 7f       	andi	r24, 0xFE	; 254
 71a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 71e:	80 91 e2 00 	lds	r24, 0x00E2
 722:	8e 7f       	andi	r24, 0xFE	; 254
 724:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 728:	80 91 e2 00 	lds	r24, 0x00E2
 72c:	80 61       	ori	r24, 0x10	; 16
 72e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 732:	42 e0       	ldi	r20, 0x02	; 2
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	a9 de       	rcall	.-686    	; 0x48c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 73a:	6a d1       	rcall	.+724    	; 0xa10 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
 768:	aa 97       	sbiw	r28, 0x2a	; 42
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	de bf       	out	0x3e, r29	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	cd bf       	out	0x3d, r28	; 61
 774:	e4 e0       	ldi	r30, 0x04	; 4
 776:	f1 e0       	ldi	r31, 0x01	; 1
 778:	88 e0       	ldi	r24, 0x08	; 8
 77a:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 77c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 780:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 782:	8e 13       	cpse	r24, r30
 784:	fb cf       	rjmp	.-10     	; 0x77c <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 786:	44 d1       	rcall	.+648    	; 0xa10 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 788:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 78c:	83 ff       	sbrs	r24, 3
 78e:	28 c1       	rjmp	.+592    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 790:	80 91 04 01 	lds	r24, 0x0104

		switch (USB_ControlRequest.bRequest)
 794:	90 91 05 01 	lds	r25, 0x0105
 798:	95 30       	cpi	r25, 0x05	; 5
 79a:	09 f4       	brne	.+2      	; 0x79e <USB_Device_ProcessControlRequest+0x40>
 79c:	83 c0       	rjmp	.+262    	; 0x8a4 <USB_Device_ProcessControlRequest+0x146>
 79e:	30 f4       	brcc	.+12     	; 0x7ac <USB_Device_ProcessControlRequest+0x4e>
 7a0:	91 30       	cpi	r25, 0x01	; 1
 7a2:	a9 f1       	breq	.+106    	; 0x80e <USB_Device_ProcessControlRequest+0xb0>
 7a4:	68 f0       	brcs	.+26     	; 0x7c0 <USB_Device_ProcessControlRequest+0x62>
 7a6:	93 30       	cpi	r25, 0x03	; 3
 7a8:	91 f1       	breq	.+100    	; 0x80e <USB_Device_ProcessControlRequest+0xb0>
 7aa:	1a c1       	rjmp	.+564    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
 7ac:	98 30       	cpi	r25, 0x08	; 8
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <USB_Device_ProcessControlRequest+0x54>
 7b0:	ed c0       	rjmp	.+474    	; 0x98c <USB_Device_ProcessControlRequest+0x22e>
 7b2:	99 30       	cpi	r25, 0x09	; 9
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <USB_Device_ProcessControlRequest+0x5a>
 7b6:	f9 c0       	rjmp	.+498    	; 0x9aa <USB_Device_ProcessControlRequest+0x24c>
 7b8:	96 30       	cpi	r25, 0x06	; 6
 7ba:	09 f0       	breq	.+2      	; 0x7be <USB_Device_ProcessControlRequest+0x60>
 7bc:	11 c1       	rjmp	.+546    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
 7be:	93 c0       	rjmp	.+294    	; 0x8e6 <USB_Device_ProcessControlRequest+0x188>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7c0:	80 38       	cpi	r24, 0x80	; 128
 7c2:	21 f0       	breq	.+8      	; 0x7cc <USB_Device_ProcessControlRequest+0x6e>
 7c4:	82 38       	cpi	r24, 0x82	; 130
 7c6:	09 f0       	breq	.+2      	; 0x7ca <USB_Device_ProcessControlRequest+0x6c>
 7c8:	0b c1       	rjmp	.+534    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 7cc:	80 91 01 01 	lds	r24, 0x0101
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 7d0:	90 91 02 01 	lds	r25, 0x0102
 7d4:	99 23       	and	r25, r25
 7d6:	89 f0       	breq	.+34     	; 0x7fa <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7d8:	82 60       	ori	r24, 0x02	; 2
 7da:	0f c0       	rjmp	.+30     	; 0x7fa <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7dc:	80 91 08 01 	lds	r24, 0x0108
 7e0:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7e2:	85 30       	cpi	r24, 0x05	; 5
 7e4:	08 f0       	brcs	.+2      	; 0x7e8 <USB_Device_ProcessControlRequest+0x8a>
 7e6:	fc c0       	rjmp	.+504    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7ec:	80 91 eb 00 	lds	r24, 0x00EB
 7f0:	85 fb       	bst	r24, 5
 7f2:	88 27       	eor	r24, r24
 7f4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7f6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7fa:	90 91 e8 00 	lds	r25, 0x00E8
 7fe:	97 7f       	andi	r25, 0xF7	; 247
 800:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 804:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 808:	10 92 f1 00 	sts	0x00F1, r1
 80c:	ca c0       	rjmp	.+404    	; 0x9a2 <USB_Device_ProcessControlRequest+0x244>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 80e:	28 2f       	mov	r18, r24
 810:	2d 7f       	andi	r18, 0xFD	; 253
 812:	09 f0       	breq	.+2      	; 0x816 <USB_Device_ProcessControlRequest+0xb8>
 814:	e5 c0       	rjmp	.+458    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 816:	88 23       	and	r24, r24
 818:	19 f0       	breq	.+6      	; 0x820 <USB_Device_ProcessControlRequest+0xc2>
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	61 f0       	breq	.+24     	; 0x836 <USB_Device_ProcessControlRequest+0xd8>
 81e:	e0 c0       	rjmp	.+448    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 820:	80 91 06 01 	lds	r24, 0x0106
 824:	81 30       	cpi	r24, 0x01	; 1
 826:	09 f0       	breq	.+2      	; 0x82a <USB_Device_ProcessControlRequest+0xcc>
 828:	db c0       	rjmp	.+438    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 82a:	93 30       	cpi	r25, 0x03	; 3
 82c:	09 f0       	breq	.+2      	; 0x830 <USB_Device_ProcessControlRequest+0xd2>
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	80 93 02 01 	sts	0x0102, r24
 834:	2e c0       	rjmp	.+92     	; 0x892 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 836:	80 91 06 01 	lds	r24, 0x0106
 83a:	81 11       	cpse	r24, r1
 83c:	2a c0       	rjmp	.+84     	; 0x892 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 83e:	80 91 08 01 	lds	r24, 0x0108
 842:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 844:	2f ef       	ldi	r18, 0xFF	; 255
 846:	28 0f       	add	r18, r24
 848:	24 30       	cpi	r18, 0x04	; 4
 84a:	08 f0       	brcs	.+2      	; 0x84e <USB_Device_ProcessControlRequest+0xf0>
 84c:	c9 c0       	rjmp	.+402    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 84e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 852:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 856:	20 ff       	sbrs	r18, 0
 858:	1c c0       	rjmp	.+56     	; 0x892 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 85a:	93 30       	cpi	r25, 0x03	; 3
 85c:	21 f4       	brne	.+8      	; 0x866 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 85e:	80 91 eb 00 	lds	r24, 0x00EB
 862:	80 62       	ori	r24, 0x20	; 32
 864:	14 c0       	rjmp	.+40     	; 0x88e <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 866:	90 91 eb 00 	lds	r25, 0x00EB
 86a:	90 61       	ori	r25, 0x10	; 16
 86c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 870:	21 e0       	ldi	r18, 0x01	; 1
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	a9 01       	movw	r20, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <USB_Device_ProcessControlRequest+0x11e>
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	8a 95       	dec	r24
 87e:	e2 f7       	brpl	.-8      	; 0x878 <USB_Device_ProcessControlRequest+0x11a>
 880:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
 884:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 888:	80 91 eb 00 	lds	r24, 0x00EB
 88c:	88 60       	ori	r24, 0x08	; 8
 88e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 892:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 896:	80 91 e8 00 	lds	r24, 0x00E8
 89a:	87 7f       	andi	r24, 0xF7	; 247
 89c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8a0:	2a de       	rcall	.-940    	; 0x4f6 <Endpoint_ClearStatusStage>
 8a2:	9e c0       	rjmp	.+316    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8a4:	81 11       	cpse	r24, r1
 8a6:	9c c0       	rjmp	.+312    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 8a8:	10 91 06 01 	lds	r17, 0x0106
 8ac:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8ae:	80 91 e3 00 	lds	r24, 0x00E3
 8b2:	80 78       	andi	r24, 0x80	; 128
 8b4:	81 2b       	or	r24, r17
 8b6:	80 93 e3 00 	sts	0x00E3, r24
 8ba:	80 91 e8 00 	lds	r24, 0x00E8
 8be:	87 7f       	andi	r24, 0xF7	; 247
 8c0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8c4:	18 de       	rcall	.-976    	; 0x4f6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8c6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 8ca:	80 ff       	sbrs	r24, 0
 8cc:	fc cf       	rjmp	.-8      	; 0x8c6 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 8ce:	80 91 e3 00 	lds	r24, 0x00E3
 8d2:	80 68       	ori	r24, 0x80	; 128
 8d4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8d8:	11 11       	cpse	r17, r1
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <USB_Device_ProcessControlRequest+0x182>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <USB_Device_ProcessControlRequest+0x184>
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	8e bb       	out	0x1e, r24	; 30
 8e4:	7d c0       	rjmp	.+250    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8e6:	80 58       	subi	r24, 0x80	; 128
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <USB_Device_ProcessControlRequest+0x190>
 8ec:	79 c0       	rjmp	.+242    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8ee:	80 91 06 01 	lds	r24, 0x0106
 8f2:	90 91 07 01 	lds	r25, 0x0107
 8f6:	8c 3d       	cpi	r24, 0xDC	; 220
 8f8:	53 e0       	ldi	r21, 0x03	; 3
 8fa:	95 07       	cpc	r25, r21
 8fc:	71 f5       	brne	.+92     	; 0x95a <USB_Device_ProcessControlRequest+0x1fc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8fe:	83 e0       	ldi	r24, 0x03	; 3
 900:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 902:	8a e2       	ldi	r24, 0x2A	; 42
 904:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 906:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 908:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 90a:	de 01       	movw	r26, r28
 90c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 90e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 910:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 912:	51 e2       	ldi	r21, 0x21	; 33
 914:	e3 2f       	mov	r30, r19
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	50 93 57 00 	sts	0x0057, r21
 91c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 91e:	20 ff       	sbrs	r18, 0
 920:	03 c0       	rjmp	.+6      	; 0x928 <USB_Device_ProcessControlRequest+0x1ca>
					{
						SerialByte >>= 4;
 922:	e2 95       	swap	r30
 924:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 926:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 928:	ef 70       	andi	r30, 0x0F	; 15
 92a:	8e 2f       	mov	r24, r30
 92c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 92e:	ea 30       	cpi	r30, 0x0A	; 10
 930:	10 f0       	brcs	.+4      	; 0x936 <USB_Device_ProcessControlRequest+0x1d8>
 932:	c7 96       	adiw	r24, 0x37	; 55
 934:	01 c0       	rjmp	.+2      	; 0x938 <USB_Device_ProcessControlRequest+0x1da>
 936:	c0 96       	adiw	r24, 0x30	; 48
 938:	8d 93       	st	X+, r24
 93a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 93c:	2f 5f       	subi	r18, 0xFF	; 255
 93e:	24 31       	cpi	r18, 0x14	; 20
 940:	49 f7       	brne	.-46     	; 0x914 <USB_Device_ProcessControlRequest+0x1b6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 942:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 944:	80 91 e8 00 	lds	r24, 0x00E8
 948:	87 7f       	andi	r24, 0xF7	; 247
 94a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 94e:	6a e2       	ldi	r22, 0x2A	; 42
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	ce 01       	movw	r24, r28
 954:	01 96       	adiw	r24, 0x01	; 1
 956:	e4 dc       	rcall	.-1592   	; 0x320 <Endpoint_Write_Control_Stream_LE>
 958:	13 c0       	rjmp	.+38     	; 0x980 <USB_Device_ProcessControlRequest+0x222>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 95a:	60 91 08 01 	lds	r22, 0x0108
 95e:	70 91 09 01 	lds	r23, 0x0109
 962:	ae 01       	movw	r20, r28
 964:	4f 5f       	subi	r20, 0xFF	; 255
 966:	5f 4f       	sbci	r21, 0xFF	; 255
 968:	59 dc       	rcall	.-1870   	; 0x21c <CALLBACK_USB_GetDescriptor>
 96a:	bc 01       	movw	r22, r24
 96c:	89 2b       	or	r24, r25
 96e:	c1 f1       	breq	.+112    	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
 970:	90 91 e8 00 	lds	r25, 0x00E8
 974:	97 7f       	andi	r25, 0xF7	; 247
 976:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	9a 81       	ldd	r25, Y+2	; 0x02
 97e:	2c dd       	rcall	.-1448   	; 0x3d8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 980:	80 91 e8 00 	lds	r24, 0x00E8
 984:	8b 77       	andi	r24, 0x7B	; 123
 986:	80 93 e8 00 	sts	0x00E8, r24
 98a:	2a c0       	rjmp	.+84     	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 98c:	80 38       	cpi	r24, 0x80	; 128
 98e:	41 f5       	brne	.+80     	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 990:	80 91 e8 00 	lds	r24, 0x00E8
 994:	87 7f       	andi	r24, 0xF7	; 247
 996:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 99a:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 99e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9a2:	80 91 e8 00 	lds	r24, 0x00E8
 9a6:	8e 77       	andi	r24, 0x7E	; 126
 9a8:	79 cf       	rjmp	.-270    	; 0x89c <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9aa:	81 11       	cpse	r24, r1
 9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9ae:	90 91 06 01 	lds	r25, 0x0106
 9b2:	92 30       	cpi	r25, 0x02	; 2
 9b4:	a8 f4       	brcc	.+42     	; 0x9e0 <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b6:	80 91 e8 00 	lds	r24, 0x00E8
 9ba:	87 7f       	andi	r24, 0xF7	; 247
 9bc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9c0:	90 93 00 01 	sts	0x0100, r25

	Endpoint_ClearStatusStage();
 9c4:	98 dd       	rcall	.-1232   	; 0x4f6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 9c6:	80 91 00 01 	lds	r24, 0x0100
 9ca:	81 11       	cpse	r24, r1
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9ce:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9d2:	87 fd       	sbrc	r24, 7
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <USB_Device_ProcessControlRequest+0x27c>
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0x27e>
 9da:	84 e0       	ldi	r24, 0x04	; 4
 9dc:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 9de:	99 db       	rcall	.-2254   	; 0x112 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9e0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9e4:	83 ff       	sbrs	r24, 3
 9e6:	0a c0       	rjmp	.+20     	; 0x9fc <USB_Device_ProcessControlRequest+0x29e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9e8:	80 91 e8 00 	lds	r24, 0x00E8
 9ec:	87 7f       	andi	r24, 0xF7	; 247
 9ee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9f2:	80 91 eb 00 	lds	r24, 0x00EB
 9f6:	80 62       	ori	r24, 0x20	; 32
 9f8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 9fc:	aa 96       	adiw	r28, 0x2a	; 42
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	1f 91       	pop	r17
 a0e:	08 95       	ret

00000a10 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 a10:	08 95       	ret

00000a12 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a12:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a14:	8e b3       	in	r24, 0x1e	; 30
 a16:	88 23       	and	r24, r24
 a18:	99 f0       	breq	.+38     	; 0xa40 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a1a:	c0 91 e9 00 	lds	r28, 0x00E9
 a1e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a20:	90 91 ec 00 	lds	r25, 0x00EC
 a24:	89 2f       	mov	r24, r25
 a26:	81 70       	andi	r24, 0x01	; 1
 a28:	90 fd       	sbrc	r25, 0
 a2a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a2c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a32:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a36:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 a38:	92 de       	rcall	.-732    	; 0x75e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a3a:	cf 70       	andi	r28, 0x0F	; 15
 a3c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
