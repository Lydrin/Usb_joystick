
pad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000aa0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004124  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f47  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000296f  00000000  00000000  00005d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  00008708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a3b  00000000  00000000  00008d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029bf  00000000  00000000  0000a797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000d156  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e9 c2       	rjmp	.+1490   	; 0x600 <__vector_11>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	61 c0       	rjmp	.+194    	; 0x120 <__vector_23>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	12 03 4c 00 55 00 46 00 41 00 20 00 50 00 41 00     ..L.U.F.A. .P.A.
  84:	44 00 00 00                                         D...

00000088 <ManufacturerString>:
  88:	1e 03 50 00 6f 00 6c 00 79 00 74 00 65 00 63 00     ..P.o.l.y.t.e.c.
  98:	68 00 20 00 4c 00 69 00 6c 00 6c 00 65 00 00 00     h. .L.i.l.l.e...

000000a8 <LanguageString>:
  a8:	04 03 09 04                                         ....

000000ac <PAD_ConfigurationDescriptor>:
  ac:	09 02 29 00 02 01 00 c0 fa 09 04 00 00 01 ff 00     ..).............
  bc:	00 00 07 05 81 03 01 00 05 09 04 01 00 01 ff 00     ................
  cc:	00 00 07 05 02 03 01 00 05                          .........

000000d5 <PAD_DeviceDescriptor>:
  d5:	12 01 10 01 ff 00 00 08 cd ab 34 12 00 02 01 02     ..........4.....
  e5:	03 01 00                                            ...

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d2 e0       	ldi	r29, 0x02	; 2
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
  f4:	11 e0       	ldi	r17, 0x01	; 1
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
 100:	05 90       	lpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	ae 30       	cpi	r26, 0x0E	; 14
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	71 d0       	rcall	.+226    	; 0x1fe <main>
 11c:	85 c4       	rjmp	.+2314   	; 0xa28 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <__vector_23>:

uint8_t data_send;
uint8_t state_send = 0;

ISR(USART1_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	data_send = UDR1;
 12c:	80 91 ce 00 	lds	r24, 0x00CE
 130:	80 93 01 01 	sts	0x0101, r24
	state_send = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 00 01 	sts	0x0100, r24
}
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <SendNextReport>:


void SendNextReport(void)
{
	if(state_send)
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	88 23       	and	r24, r24
 14c:	a9 f0       	breq	.+42     	; 0x178 <SendNextReport+0x32>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 154:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_SelectEndpoint(PAD_IN_EPADDR);

		if (Endpoint_IsReadWriteAllowed())
 158:	85 ff       	sbrs	r24, 5
 15a:	0c c0       	rjmp	.+24     	; 0x174 <SendNextReport+0x2e>
		{
			Endpoint_Write_Stream_LE(&data_send, sizeof(uint8_t), NULL);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	81 d0       	rcall	.+258    	; 0x26c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 16a:	80 91 e8 00 	lds	r24, 0x00E8
 16e:	8e 77       	andi	r24, 0x7E	; 126
 170:	80 93 e8 00 	sts	0x00E8, r24
			Endpoint_ClearIN();
		}	
		
		state_send = 0;
 174:	10 92 00 01 	sts	0x0100, r1
 178:	08 95       	ret

0000017a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 17a:	42 e0       	ldi	r20, 0x02	; 2
 17c:	61 ec       	ldi	r22, 0xC1	; 193
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	75 d1       	rcall	.+746    	; 0x46c <Endpoint_ConfigureEndpoint_Prv>
 182:	42 e0       	ldi	r20, 0x02	; 2
 184:	60 ec       	ldi	r22, 0xC0	; 192
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	71 d1       	rcall	.+738    	; 0x46c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 18a:	e2 ee       	ldi	r30, 0xE2	; 226
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 19c:	80 91 e8 00 	lds	r24, 0x00E8

void ReceiveNextReport(void)
{
	Endpoint_SelectEndpoint(PAD_OUT_EPADDR);

	if (Endpoint_IsOUTReceived())
 1a0:	82 ff       	sbrs	r24, 2
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <ReceiveNextReport+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 1a4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (Endpoint_IsReadWriteAllowed())
 1a8:	85 ff       	sbrs	r24, 5
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <ReceiveNextReport+0x26>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 1ac:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 1b0:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 1b4:	95 ff       	sbrs	r25, 5
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <ReceiveNextReport+0x1a>
				UDR1 = DataByte;
 1b8:	80 93 ce 00 	sts	0x00CE, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1bc:	80 91 e8 00 	lds	r24, 0x00E8
 1c0:	8b 77       	andi	r24, 0x7B	; 123
 1c2:	80 93 e8 00 	sts	0x00E8, r24
 1c6:	08 95       	ret

000001c8 <PAD_Task>:
	}
}

void PAD_Task(void)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1c8:	8e b3       	in	r24, 0x1e	; 30
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <PAD_Task+0xa>
		return;
		
	SendNextReport();
 1ce:	bb df       	rcall	.-138    	; 0x146 <SendNextReport>
	ReceiveNextReport();
 1d0:	e2 cf       	rjmp	.-60     	; 0x196 <ReceiveNextReport>
 1d2:	08 95       	ret

000001d4 <SetupHardware>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1d4:	87 e6       	ldi	r24, 0x67	; 103
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 cd 00 	sts	0x00CD, r25
 1dc:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1e6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1ea:	e9 ec       	ldi	r30, 0xC9	; 201
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	80 83       	st	Z, r24

				DDRD  |= (1 << 3);
 1f2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1f4:	5a 9a       	sbi	0x0b, 2	; 11
}

void SetupHardware(void)
{
	Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);
	UCSR1B |= (1 << RXCIE1); // Enable the USART Receive Complete interrupt (USART_RXC)
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
	USB_Init();
 1fc:	f2 c1       	rjmp	.+996    	; 0x5e2 <USB_Init>

000001fe <main>:
	ReceiveNextReport();
}
 
int main(void)
{
	SetupHardware();
 1fe:	ea df       	rcall	.-44     	; 0x1d4 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 200:	78 94       	sei
	GlobalInterruptEnable();

	for (;;){
	  USB_USBTask();
 202:	f9 d3       	rcall	.+2034   	; 0x9f6 <USB_USBTask>
	  PAD_Task();
 204:	e1 df       	rcall	.-62     	; 0x1c8 <PAD_Task>
	}
 206:	fd cf       	rjmp	.-6      	; 0x202 <main+0x4>

00000208 <CALLBACK_USB_GetDescriptor>:

uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 208:	29 2f       	mov	r18, r25
 20a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 20c:	22 30       	cpi	r18, 0x02	; 2
 20e:	31 05       	cpc	r19, r1
 210:	59 f0       	breq	.+22     	; 0x228 <CALLBACK_USB_GetDescriptor+0x20>
 212:	23 30       	cpi	r18, 0x03	; 3
 214:	31 05       	cpc	r19, r1
 216:	69 f0       	breq	.+26     	; 0x232 <CALLBACK_USB_GetDescriptor+0x2a>
 218:	21 30       	cpi	r18, 0x01	; 1
 21a:	31 05       	cpc	r19, r1
 21c:	f9 f4       	brne	.+62     	; 0x25c <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 21e:	82 e1       	ldi	r24, 0x12	; 18
 220:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
 222:	25 ed       	ldi	r18, 0xD5	; 213
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	1e c0       	rjmp	.+60     	; 0x264 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 228:	89 e2       	ldi	r24, 0x29	; 41
 22a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
 22c:	2c ea       	ldi	r18, 0xAC	; 172
 22e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 230:	19 c0       	rjmp	.+50     	; 0x264 <CALLBACK_USB_GetDescriptor+0x5c>
 232:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	41 f0       	breq	.+16     	; 0x24a <CALLBACK_USB_GetDescriptor+0x42>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	91 05       	cpc	r25, r1
 23e:	41 f0       	breq	.+16     	; 0x250 <CALLBACK_USB_GetDescriptor+0x48>
 240:	89 2b       	or	r24, r25
 242:	61 f4       	brne	.+24     	; 0x25c <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 244:	e8 ea       	ldi	r30, 0xA8	; 168
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	05 c0       	rjmp	.+10     	; 0x254 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 24a:	e8 e8       	ldi	r30, 0x88	; 136
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 250:	e4 e7       	ldi	r30, 0x74	; 116
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	84 91       	lpm	r24, Z
 256:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 258:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 25a:	04 c0       	rjmp	.+8      	; 0x264 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 264:	fa 01       	movw	r30, r20
 266:	31 83       	std	Z+1, r19	; 0x01
 268:	20 83       	st	Z, r18
	return Size;
}
 26a:	08 95       	ret

0000026c <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	8b 01       	movw	r16, r22
 280:	7a 01       	movw	r14, r20
 282:	46 d1       	rcall	.+652    	; 0x510 <Endpoint_WaitUntilReady>
 284:	81 11       	cpse	r24, r1
 286:	33 c0       	rjmp	.+102    	; 0x2ee <Endpoint_Write_Stream_LE+0x82>
 288:	e1 14       	cp	r14, r1
 28a:	f1 04       	cpc	r15, r1
 28c:	39 f0       	breq	.+14     	; 0x29c <Endpoint_Write_Stream_LE+0x30>
 28e:	f7 01       	movw	r30, r14
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	08 1b       	sub	r16, r24
 296:	19 0b       	sbc	r17, r25
 298:	c8 0f       	add	r28, r24
 29a:	d9 1f       	adc	r29, r25
 29c:	c1 2c       	mov	r12, r1
 29e:	d1 2c       	mov	r13, r1
 2a0:	01 15       	cp	r16, r1
 2a2:	11 05       	cpc	r17, r1
 2a4:	19 f1       	breq	.+70     	; 0x2ec <Endpoint_Write_Stream_LE+0x80>
 2a6:	80 91 e8 00 	lds	r24, 0x00E8
 2aa:	85 fd       	sbrc	r24, 5
 2ac:	16 c0       	rjmp	.+44     	; 0x2da <Endpoint_Write_Stream_LE+0x6e>
 2ae:	80 91 e8 00 	lds	r24, 0x00E8
 2b2:	8e 77       	andi	r24, 0x7E	; 126
 2b4:	80 93 e8 00 	sts	0x00E8, r24
 2b8:	9e d3       	rcall	.+1852   	; 0x9f6 <USB_USBTask>
 2ba:	e1 14       	cp	r14, r1
 2bc:	f1 04       	cpc	r15, r1
 2be:	49 f0       	breq	.+18     	; 0x2d2 <Endpoint_Write_Stream_LE+0x66>
 2c0:	f7 01       	movw	r30, r14
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	c8 0e       	add	r12, r24
 2c8:	d9 1e       	adc	r13, r25
 2ca:	d1 82       	std	Z+1, r13	; 0x01
 2cc:	c0 82       	st	Z, r12
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <Endpoint_Write_Stream_LE+0x82>
 2d2:	1e d1       	rcall	.+572    	; 0x510 <Endpoint_WaitUntilReady>
 2d4:	88 23       	and	r24, r24
 2d6:	21 f3       	breq	.-56     	; 0x2a0 <Endpoint_Write_Stream_LE+0x34>
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <Endpoint_Write_Stream_LE+0x82>
 2da:	89 91       	ld	r24, Y+
 2dc:	80 93 f1 00 	sts	0x00F1, r24
 2e0:	01 50       	subi	r16, 0x01	; 1
 2e2:	11 09       	sbc	r17, r1
 2e4:	ff ef       	ldi	r31, 0xFF	; 255
 2e6:	cf 1a       	sub	r12, r31
 2e8:	df 0a       	sbc	r13, r31
 2ea:	da cf       	rjmp	.-76     	; 0x2a0 <Endpoint_Write_Stream_LE+0x34>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	08 95       	ret

00000300 <Endpoint_Write_Control_Stream_LE>:
 300:	20 91 0c 01 	lds	r18, 0x010C
 304:	30 91 0d 01 	lds	r19, 0x010D
 308:	26 17       	cp	r18, r22
 30a:	37 07       	cpc	r19, r23
 30c:	48 f0       	brcs	.+18     	; 0x320 <Endpoint_Write_Control_Stream_LE+0x20>
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	39 f4       	brne	.+14     	; 0x322 <Endpoint_Write_Control_Stream_LE+0x22>
 314:	20 91 e8 00 	lds	r18, 0x00E8
 318:	2e 77       	andi	r18, 0x7E	; 126
 31a:	20 93 e8 00 	sts	0x00E8, r18
 31e:	01 c0       	rjmp	.+2      	; 0x322 <Endpoint_Write_Control_Stream_LE+0x22>
 320:	b9 01       	movw	r22, r18
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	61 15       	cp	r22, r1
 326:	71 05       	cpc	r23, r1
 328:	79 f1       	breq	.+94     	; 0x388 <Endpoint_Write_Control_Stream_LE+0x88>
 32a:	2e b3       	in	r18, 0x1e	; 30
 32c:	22 23       	and	r18, r18
 32e:	f1 f1       	breq	.+124    	; 0x3ac <Endpoint_Write_Control_Stream_LE+0xac>
 330:	25 30       	cpi	r18, 0x05	; 5
 332:	f1 f1       	breq	.+124    	; 0x3b0 <Endpoint_Write_Control_Stream_LE+0xb0>
 334:	20 91 e8 00 	lds	r18, 0x00E8
 338:	23 fd       	sbrc	r18, 3
 33a:	3c c0       	rjmp	.+120    	; 0x3b4 <Endpoint_Write_Control_Stream_LE+0xb4>
 33c:	20 91 e8 00 	lds	r18, 0x00E8
 340:	22 fd       	sbrc	r18, 2
 342:	2e c0       	rjmp	.+92     	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0xa0>
 344:	20 91 e8 00 	lds	r18, 0x00E8
 348:	20 ff       	sbrs	r18, 0
 34a:	ec cf       	rjmp	.-40     	; 0x324 <Endpoint_Write_Control_Stream_LE+0x24>
 34c:	20 91 f2 00 	lds	r18, 0x00F2
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	cf 01       	movw	r24, r30
 356:	61 15       	cp	r22, r1
 358:	71 05       	cpc	r23, r1
 35a:	59 f0       	breq	.+22     	; 0x372 <Endpoint_Write_Control_Stream_LE+0x72>
 35c:	28 30       	cpi	r18, 0x08	; 8
 35e:	31 05       	cpc	r19, r1
 360:	40 f4       	brcc	.+16     	; 0x372 <Endpoint_Write_Control_Stream_LE+0x72>
 362:	81 91       	ld	r24, Z+
 364:	80 93 f1 00 	sts	0x00F1, r24
 368:	61 50       	subi	r22, 0x01	; 1
 36a:	71 09       	sbc	r23, r1
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	f1 cf       	rjmp	.-30     	; 0x354 <Endpoint_Write_Control_Stream_LE+0x54>
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	28 30       	cpi	r18, 0x08	; 8
 376:	31 05       	cpc	r19, r1
 378:	09 f0       	breq	.+2      	; 0x37c <Endpoint_Write_Control_Stream_LE+0x7c>
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	20 91 e8 00 	lds	r18, 0x00E8
 380:	2e 77       	andi	r18, 0x7E	; 126
 382:	20 93 e8 00 	sts	0x00E8, r18
 386:	ce cf       	rjmp	.-100    	; 0x324 <Endpoint_Write_Control_Stream_LE+0x24>
 388:	41 11       	cpse	r20, r1
 38a:	cf cf       	rjmp	.-98     	; 0x32a <Endpoint_Write_Control_Stream_LE+0x2a>
 38c:	09 c0       	rjmp	.+18     	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0xa0>
 38e:	8e b3       	in	r24, 0x1e	; 30
 390:	88 23       	and	r24, r24
 392:	61 f0       	breq	.+24     	; 0x3ac <Endpoint_Write_Control_Stream_LE+0xac>
 394:	85 30       	cpi	r24, 0x05	; 5
 396:	61 f0       	breq	.+24     	; 0x3b0 <Endpoint_Write_Control_Stream_LE+0xb0>
 398:	80 91 e8 00 	lds	r24, 0x00E8
 39c:	83 fd       	sbrc	r24, 3
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <Endpoint_Write_Control_Stream_LE+0xb4>
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	82 ff       	sbrs	r24, 2
 3a6:	f3 cf       	rjmp	.-26     	; 0x38e <Endpoint_Write_Control_Stream_LE+0x8e>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	08 95       	ret
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	08 95       	ret
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	08 95       	ret

000003b8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 3b8:	20 91 0c 01 	lds	r18, 0x010C
 3bc:	30 91 0d 01 	lds	r19, 0x010D
 3c0:	26 17       	cp	r18, r22
 3c2:	37 07       	cpc	r19, r23
 3c4:	48 f0       	brcs	.+18     	; 0x3d8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3c6:	61 15       	cp	r22, r1
 3c8:	71 05       	cpc	r23, r1
 3ca:	39 f4       	brne	.+14     	; 0x3da <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3cc:	20 91 e8 00 	lds	r18, 0x00E8
 3d0:	2e 77       	andi	r18, 0x7E	; 126
 3d2:	20 93 e8 00 	sts	0x00E8, r18
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <Endpoint_Write_Control_PStream_LE+0x22>
 3d8:	b9 01       	movw	r22, r18
 3da:	fc 01       	movw	r30, r24
 3dc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3de:	61 15       	cp	r22, r1
 3e0:	71 05       	cpc	r23, r1
 3e2:	61 f1       	breq	.+88     	; 0x43c <Endpoint_Write_Control_PStream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3e4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3e6:	88 23       	and	r24, r24
 3e8:	d9 f1       	breq	.+118    	; 0x460 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3ea:	85 30       	cpi	r24, 0x05	; 5
 3ec:	d9 f1       	breq	.+118    	; 0x464 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 3f2:	83 fd       	sbrc	r24, 3
 3f4:	39 c0       	rjmp	.+114    	; 0x468 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 3fa:	82 fd       	sbrc	r24, 2
 3fc:	2b c0       	rjmp	.+86     	; 0x454 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3fe:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 402:	80 ff       	sbrs	r24, 0
 404:	ec cf       	rjmp	.-40     	; 0x3de <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 406:	80 91 f2 00 	lds	r24, 0x00F2
 40a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 40c:	61 15       	cp	r22, r1
 40e:	71 05       	cpc	r23, r1
 410:	59 f0       	breq	.+22     	; 0x428 <Endpoint_Write_Control_PStream_LE+0x70>
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	91 05       	cpc	r25, r1
 416:	40 f4       	brcc	.+16     	; 0x428 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 418:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 41a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 41e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 420:	61 50       	subi	r22, 0x01	; 1
 422:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	f2 cf       	rjmp	.-28     	; 0x40c <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	08 97       	sbiw	r24, 0x08	; 8
 42c:	09 f0       	breq	.+2      	; 0x430 <Endpoint_Write_Control_PStream_LE+0x78>
 42e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 430:	80 91 e8 00 	lds	r24, 0x00E8
 434:	8e 77       	andi	r24, 0x7E	; 126
 436:	80 93 e8 00 	sts	0x00E8, r24
 43a:	d1 cf       	rjmp	.-94     	; 0x3de <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 43c:	21 11       	cpse	r18, r1
 43e:	d2 cf       	rjmp	.-92     	; 0x3e4 <Endpoint_Write_Control_PStream_LE+0x2c>
 440:	09 c0       	rjmp	.+18     	; 0x454 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 442:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 444:	88 23       	and	r24, r24
 446:	61 f0       	breq	.+24     	; 0x460 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 448:	85 30       	cpi	r24, 0x05	; 5
 44a:	61 f0       	breq	.+24     	; 0x464 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 44c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 450:	83 fd       	sbrc	r24, 3
 452:	0a c0       	rjmp	.+20     	; 0x468 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 454:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 458:	82 ff       	sbrs	r24, 2
 45a:	f3 cf       	rjmp	.-26     	; 0x442 <Endpoint_Write_Control_PStream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 468:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 46a:	08 95       	ret

0000046c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 46c:	98 2f       	mov	r25, r24
 46e:	95 30       	cpi	r25, 0x05	; 5
 470:	58 f5       	brcc	.+86     	; 0x4c8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 472:	90 93 e9 00 	sts	0x00E9, r25
 476:	98 17       	cp	r25, r24
 478:	39 f0       	breq	.+14     	; 0x488 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 47a:	70 91 ec 00 	lds	r23, 0x00EC
 47e:	20 91 ed 00 	lds	r18, 0x00ED
 482:	50 91 f0 00 	lds	r21, 0x00F0
 486:	03 c0       	rjmp	.+6      	; 0x48e <Endpoint_ConfigureEndpoint_Prv+0x22>
 488:	24 2f       	mov	r18, r20
 48a:	76 2f       	mov	r23, r22
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	21 ff       	sbrs	r18, 1
 490:	19 c0       	rjmp	.+50     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x58>
 492:	30 91 eb 00 	lds	r19, 0x00EB
 496:	3e 7f       	andi	r19, 0xFE	; 254
 498:	30 93 eb 00 	sts	0x00EB, r19
 49c:	30 91 ed 00 	lds	r19, 0x00ED
 4a0:	3d 7f       	andi	r19, 0xFD	; 253
 4a2:	30 93 ed 00 	sts	0x00ED, r19
 4a6:	30 91 eb 00 	lds	r19, 0x00EB
 4aa:	31 60       	ori	r19, 0x01	; 1
 4ac:	30 93 eb 00 	sts	0x00EB, r19
 4b0:	70 93 ec 00 	sts	0x00EC, r23
 4b4:	20 93 ed 00 	sts	0x00ED, r18
 4b8:	50 93 f0 00 	sts	0x00F0, r21
 4bc:	20 91 ee 00 	lds	r18, 0x00EE
 4c0:	27 ff       	sbrs	r18, 7
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <Endpoint_ConfigureEndpoint_Prv+0x66>
 4c4:	9f 5f       	subi	r25, 0xFF	; 255
 4c6:	d3 cf       	rjmp	.-90     	; 0x46e <Endpoint_ConfigureEndpoint_Prv+0x2>
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	80 93 e9 00 	sts	0x00E9, r24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret

000004d6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4d6:	80 91 06 01 	lds	r24, 0x0106
 4da:	87 ff       	sbrs	r24, 7
 4dc:	0f c0       	rjmp	.+30     	; 0x4fc <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4de:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 4e2:	82 fd       	sbrc	r24, 2
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4e6:	8e b3       	in	r24, 0x1e	; 30
 4e8:	81 11       	cpse	r24, r1
 4ea:	f9 cf       	rjmp	.-14     	; 0x4de <Endpoint_ClearStatusStage+0x8>
 4ec:	10 c0       	rjmp	.+32     	; 0x50e <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4ee:	80 91 e8 00 	lds	r24, 0x00E8
 4f2:	8b 77       	andi	r24, 0x7B	; 123
 4f4:	0a c0       	rjmp	.+20     	; 0x50a <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4f6:	8e b3       	in	r24, 0x1e	; 30
 4f8:	88 23       	and	r24, r24
 4fa:	49 f0       	breq	.+18     	; 0x50e <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4fc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 500:	80 ff       	sbrs	r24, 0
 502:	f9 cf       	rjmp	.-14     	; 0x4f6 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 504:	80 91 e8 00 	lds	r24, 0x00E8
 508:	8e 77       	andi	r24, 0x7E	; 126
 50a:	80 93 e8 00 	sts	0x00E8, r24
 50e:	08 95       	ret

00000510 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 510:	20 91 e4 00 	lds	r18, 0x00E4
 514:	30 91 e5 00 	lds	r19, 0x00E5
 518:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 51a:	40 91 ec 00 	lds	r20, 0x00EC
 51e:	84 2f       	mov	r24, r20
 520:	81 70       	andi	r24, 0x01	; 1
 522:	40 ff       	sbrs	r20, 0
 524:	21 c0       	rjmp	.+66     	; 0x568 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 526:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 52a:	80 fd       	sbrc	r24, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 52e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 530:	88 23       	and	r24, r24
 532:	91 f0       	breq	.+36     	; 0x558 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 534:	85 30       	cpi	r24, 0x05	; 5
 536:	91 f0       	breq	.+36     	; 0x55c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 538:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 53c:	85 fd       	sbrc	r24, 5
 53e:	10 c0       	rjmp	.+32     	; 0x560 <Endpoint_WaitUntilReady+0x50>
 540:	40 91 e4 00 	lds	r20, 0x00E4
 544:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 548:	42 17       	cp	r20, r18
 54a:	53 07       	cpc	r21, r19
 54c:	31 f3       	breq	.-52     	; 0x51a <Endpoint_WaitUntilReady+0xa>
 54e:	9a 01       	movw	r18, r20
 550:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 552:	19 f7       	brne	.-58     	; 0x51a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 568:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 56c:	42 ff       	sbrs	r20, 2
 56e:	df cf       	rjmp	.-66     	; 0x52e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 570:	08 95       	ret

00000572 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 572:	40 d0       	rcall	.+128    	; 0x5f4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 574:	42 d0       	rcall	.+132    	; 0x5fa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 576:	80 91 d8 00 	lds	r24, 0x00D8
 57a:	8f 77       	andi	r24, 0x7F	; 127
 57c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 580:	80 91 d8 00 	lds	r24, 0x00D8
 584:	80 68       	ori	r24, 0x80	; 128
 586:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 58a:	80 91 d8 00 	lds	r24, 0x00D8
 58e:	8f 7d       	andi	r24, 0xDF	; 223
 590:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 59c:	09 b4       	in	r0, 0x29	; 41
 59e:	00 fe       	sbrs	r0, 0
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5a2:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 5a4:	10 92 02 01 	sts	0x0102, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5a8:	10 92 04 01 	sts	0x0104, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5ac:	10 92 03 01 	sts	0x0103, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5b0:	42 e0       	ldi	r20, 0x02	; 2
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	5a df       	rcall	.-332    	; 0x46c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5b8:	80 91 e1 00 	lds	r24, 0x00E1
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5c2:	80 91 e2 00 	lds	r24, 0x00E2
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5cc:	80 91 e2 00 	lds	r24, 0x00E2
 5d0:	88 60       	ori	r24, 0x08	; 8
 5d2:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5d6:	80 91 e0 00 	lds	r24, 0x00E0
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	80 93 e0 00 	sts	0x00E0, r24
 5e0:	08 95       	ret

000005e2 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 5e2:	e3 e6       	ldi	r30, 0x63	; 99
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 93 05 01 	sts	0x0105, r24

	USB_ResetInterface();
 5f2:	bf cf       	rjmp	.-130    	; 0x572 <USB_ResetInterface>

000005f4 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5f4:	10 92 e2 00 	sts	0x00E2, r1
 5f8:	08 95       	ret

000005fa <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 5fa:	10 92 e1 00 	sts	0x00E1, r1
 5fe:	08 95       	ret

00000600 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 622:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 626:	82 ff       	sbrs	r24, 2
 628:	0a c0       	rjmp	.+20     	; 0x63e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 62a:	80 91 e2 00 	lds	r24, 0x00E2
 62e:	82 ff       	sbrs	r24, 2
 630:	06 c0       	rjmp	.+12     	; 0x63e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 632:	80 91 e1 00 	lds	r24, 0x00E1
 636:	8b 7f       	andi	r24, 0xFB	; 251
 638:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 63c:	db d1       	rcall	.+950    	; 0x9f4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 63e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 642:	80 ff       	sbrs	r24, 0
 644:	16 c0       	rjmp	.+44     	; 0x672 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 646:	80 91 e2 00 	lds	r24, 0x00E2
 64a:	80 ff       	sbrs	r24, 0
 64c:	12 c0       	rjmp	.+36     	; 0x672 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 64e:	80 91 e2 00 	lds	r24, 0x00E2
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 658:	80 91 e2 00 	lds	r24, 0x00E2
 65c:	80 61       	ori	r24, 0x10	; 16
 65e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 662:	80 91 d8 00 	lds	r24, 0x00D8
 666:	80 62       	ori	r24, 0x20	; 32
 668:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 66c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 66e:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 670:	c1 d1       	rcall	.+898    	; 0x9f4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 672:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 676:	84 ff       	sbrs	r24, 4
 678:	2e c0       	rjmp	.+92     	; 0x6d6 <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 67a:	80 91 e2 00 	lds	r24, 0x00E2
 67e:	84 ff       	sbrs	r24, 4
 680:	2a c0       	rjmp	.+84     	; 0x6d6 <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 682:	84 e0       	ldi	r24, 0x04	; 4
 684:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 686:	86 e0       	ldi	r24, 0x06	; 6
 688:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 68a:	09 b4       	in	r0, 0x29	; 41
 68c:	00 fe       	sbrs	r0, 0
 68e:	fd cf       	rjmp	.-6      	; 0x68a <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 690:	80 91 d8 00 	lds	r24, 0x00D8
 694:	8f 7d       	andi	r24, 0xDF	; 223
 696:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 69a:	80 91 e1 00 	lds	r24, 0x00E1
 69e:	8f 7e       	andi	r24, 0xEF	; 239
 6a0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6a4:	80 91 e2 00 	lds	r24, 0x00E2
 6a8:	8f 7e       	andi	r24, 0xEF	; 239
 6aa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6ae:	80 91 e2 00 	lds	r24, 0x00E2
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6b8:	80 91 02 01 	lds	r24, 0x0102
 6bc:	88 23       	and	r24, r24
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
 6c0:	84 e0       	ldi	r24, 0x04	; 4
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6c4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6c8:	87 fd       	sbrc	r24, 7
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__vector_11+0xd0>
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <__vector_11+0xd2>
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6d4:	8f d1       	rcall	.+798    	; 0x9f4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6d6:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6da:	83 ff       	sbrs	r24, 3
 6dc:	21 c0       	rjmp	.+66     	; 0x720 <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6de:	80 91 e2 00 	lds	r24, 0x00E2
 6e2:	83 ff       	sbrs	r24, 3
 6e4:	1d c0       	rjmp	.+58     	; 0x720 <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6e6:	80 91 e1 00 	lds	r24, 0x00E1
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 6f4:	10 92 02 01 	sts	0x0102, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6f8:	80 91 e1 00 	lds	r24, 0x00E1
 6fc:	8e 7f       	andi	r24, 0xFE	; 254
 6fe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 702:	80 91 e2 00 	lds	r24, 0x00E2
 706:	8e 7f       	andi	r24, 0xFE	; 254
 708:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 70c:	80 91 e2 00 	lds	r24, 0x00E2
 710:	80 61       	ori	r24, 0x10	; 16
 712:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 716:	42 e0       	ldi	r20, 0x02	; 2
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	a7 de       	rcall	.-690    	; 0x46c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 71e:	6a d1       	rcall	.+724    	; 0x9f4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	7f 91       	pop	r23
 72e:	6f 91       	pop	r22
 730:	5f 91       	pop	r21
 732:	4f 91       	pop	r20
 734:	3f 91       	pop	r19
 736:	2f 91       	pop	r18
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	aa 97       	sbiw	r28, 0x2a	; 42
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	e6 e0       	ldi	r30, 0x06	; 6
 75a:	f1 e0       	ldi	r31, 0x01	; 1
 75c:	88 e0       	ldi	r24, 0x08	; 8
 75e:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 760:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 764:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 766:	8e 13       	cpse	r24, r30
 768:	fb cf       	rjmp	.-10     	; 0x760 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 76a:	44 d1       	rcall	.+648    	; 0x9f4 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 76c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 770:	83 ff       	sbrs	r24, 3
 772:	28 c1       	rjmp	.+592    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 774:	80 91 06 01 	lds	r24, 0x0106

		switch (USB_ControlRequest.bRequest)
 778:	90 91 07 01 	lds	r25, 0x0107
 77c:	95 30       	cpi	r25, 0x05	; 5
 77e:	09 f4       	brne	.+2      	; 0x782 <USB_Device_ProcessControlRequest+0x40>
 780:	83 c0       	rjmp	.+262    	; 0x888 <USB_Device_ProcessControlRequest+0x146>
 782:	30 f4       	brcc	.+12     	; 0x790 <USB_Device_ProcessControlRequest+0x4e>
 784:	91 30       	cpi	r25, 0x01	; 1
 786:	a9 f1       	breq	.+106    	; 0x7f2 <USB_Device_ProcessControlRequest+0xb0>
 788:	68 f0       	brcs	.+26     	; 0x7a4 <USB_Device_ProcessControlRequest+0x62>
 78a:	93 30       	cpi	r25, 0x03	; 3
 78c:	91 f1       	breq	.+100    	; 0x7f2 <USB_Device_ProcessControlRequest+0xb0>
 78e:	1a c1       	rjmp	.+564    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
 790:	98 30       	cpi	r25, 0x08	; 8
 792:	09 f4       	brne	.+2      	; 0x796 <USB_Device_ProcessControlRequest+0x54>
 794:	ed c0       	rjmp	.+474    	; 0x970 <USB_Device_ProcessControlRequest+0x22e>
 796:	99 30       	cpi	r25, 0x09	; 9
 798:	09 f4       	brne	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0x5a>
 79a:	f9 c0       	rjmp	.+498    	; 0x98e <USB_Device_ProcessControlRequest+0x24c>
 79c:	96 30       	cpi	r25, 0x06	; 6
 79e:	09 f0       	breq	.+2      	; 0x7a2 <USB_Device_ProcessControlRequest+0x60>
 7a0:	11 c1       	rjmp	.+546    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
 7a2:	93 c0       	rjmp	.+294    	; 0x8ca <USB_Device_ProcessControlRequest+0x188>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7a4:	80 38       	cpi	r24, 0x80	; 128
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <USB_Device_ProcessControlRequest+0x6e>
 7a8:	82 38       	cpi	r24, 0x82	; 130
 7aa:	09 f0       	breq	.+2      	; 0x7ae <USB_Device_ProcessControlRequest+0x6c>
 7ac:	0b c1       	rjmp	.+534    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 7b0:	80 91 03 01 	lds	r24, 0x0103
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 7b4:	90 91 04 01 	lds	r25, 0x0104
 7b8:	99 23       	and	r25, r25
 7ba:	89 f0       	breq	.+34     	; 0x7de <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	0f c0       	rjmp	.+30     	; 0x7de <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7c0:	80 91 0a 01 	lds	r24, 0x010A
 7c4:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7c6:	85 30       	cpi	r24, 0x05	; 5
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <USB_Device_ProcessControlRequest+0x8a>
 7ca:	fc c0       	rjmp	.+504    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7d0:	80 91 eb 00 	lds	r24, 0x00EB
 7d4:	85 fb       	bst	r24, 5
 7d6:	88 27       	eor	r24, r24
 7d8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7da:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7de:	90 91 e8 00 	lds	r25, 0x00E8
 7e2:	97 7f       	andi	r25, 0xF7	; 247
 7e4:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 7e8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 7ec:	10 92 f1 00 	sts	0x00F1, r1
 7f0:	ca c0       	rjmp	.+404    	; 0x986 <USB_Device_ProcessControlRequest+0x244>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7f2:	28 2f       	mov	r18, r24
 7f4:	2d 7f       	andi	r18, 0xFD	; 253
 7f6:	09 f0       	breq	.+2      	; 0x7fa <USB_Device_ProcessControlRequest+0xb8>
 7f8:	e5 c0       	rjmp	.+458    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7fa:	88 23       	and	r24, r24
 7fc:	19 f0       	breq	.+6      	; 0x804 <USB_Device_ProcessControlRequest+0xc2>
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	61 f0       	breq	.+24     	; 0x81a <USB_Device_ProcessControlRequest+0xd8>
 802:	e0 c0       	rjmp	.+448    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 804:	80 91 08 01 	lds	r24, 0x0108
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	09 f0       	breq	.+2      	; 0x80e <USB_Device_ProcessControlRequest+0xcc>
 80c:	db c0       	rjmp	.+438    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 80e:	93 30       	cpi	r25, 0x03	; 3
 810:	09 f0       	breq	.+2      	; 0x814 <USB_Device_ProcessControlRequest+0xd2>
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	80 93 04 01 	sts	0x0104, r24
 818:	2e c0       	rjmp	.+92     	; 0x876 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 81a:	80 91 08 01 	lds	r24, 0x0108
 81e:	81 11       	cpse	r24, r1
 820:	2a c0       	rjmp	.+84     	; 0x876 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 822:	80 91 0a 01 	lds	r24, 0x010A
 826:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	28 0f       	add	r18, r24
 82c:	24 30       	cpi	r18, 0x04	; 4
 82e:	08 f0       	brcs	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0xf0>
 830:	c9 c0       	rjmp	.+402    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 832:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 836:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 83a:	20 ff       	sbrs	r18, 0
 83c:	1c c0       	rjmp	.+56     	; 0x876 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 83e:	93 30       	cpi	r25, 0x03	; 3
 840:	21 f4       	brne	.+8      	; 0x84a <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 842:	80 91 eb 00 	lds	r24, 0x00EB
 846:	80 62       	ori	r24, 0x20	; 32
 848:	14 c0       	rjmp	.+40     	; 0x872 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 84a:	90 91 eb 00 	lds	r25, 0x00EB
 84e:	90 61       	ori	r25, 0x10	; 16
 850:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	a9 01       	movw	r20, r18
 85a:	02 c0       	rjmp	.+4      	; 0x860 <USB_Device_ProcessControlRequest+0x11e>
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	8a 95       	dec	r24
 862:	e2 f7       	brpl	.-8      	; 0x85c <USB_Device_ProcessControlRequest+0x11a>
 864:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
 868:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 86c:	80 91 eb 00 	lds	r24, 0x00EB
 870:	88 60       	ori	r24, 0x08	; 8
 872:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 876:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 87a:	80 91 e8 00 	lds	r24, 0x00E8
 87e:	87 7f       	andi	r24, 0xF7	; 247
 880:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 884:	28 de       	rcall	.-944    	; 0x4d6 <Endpoint_ClearStatusStage>
 886:	9e c0       	rjmp	.+316    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 888:	81 11       	cpse	r24, r1
 88a:	9c c0       	rjmp	.+312    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 88c:	10 91 08 01 	lds	r17, 0x0108
 890:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 892:	80 91 e3 00 	lds	r24, 0x00E3
 896:	80 78       	andi	r24, 0x80	; 128
 898:	81 2b       	or	r24, r17
 89a:	80 93 e3 00 	sts	0x00E3, r24
 89e:	80 91 e8 00 	lds	r24, 0x00E8
 8a2:	87 7f       	andi	r24, 0xF7	; 247
 8a4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8a8:	16 de       	rcall	.-980    	; 0x4d6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8aa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 8ae:	80 ff       	sbrs	r24, 0
 8b0:	fc cf       	rjmp	.-8      	; 0x8aa <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 8b2:	80 91 e3 00 	lds	r24, 0x00E3
 8b6:	80 68       	ori	r24, 0x80	; 128
 8b8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8bc:	11 11       	cpse	r17, r1
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <USB_Device_ProcessControlRequest+0x182>
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <USB_Device_ProcessControlRequest+0x184>
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	8e bb       	out	0x1e, r24	; 30
 8c8:	7d c0       	rjmp	.+250    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8ca:	80 58       	subi	r24, 0x80	; 128
 8cc:	82 30       	cpi	r24, 0x02	; 2
 8ce:	08 f0       	brcs	.+2      	; 0x8d2 <USB_Device_ProcessControlRequest+0x190>
 8d0:	79 c0       	rjmp	.+242    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8d2:	80 91 08 01 	lds	r24, 0x0108
 8d6:	90 91 09 01 	lds	r25, 0x0109
 8da:	8c 3d       	cpi	r24, 0xDC	; 220
 8dc:	53 e0       	ldi	r21, 0x03	; 3
 8de:	95 07       	cpc	r25, r21
 8e0:	71 f5       	brne	.+92     	; 0x93e <USB_Device_ProcessControlRequest+0x1fc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8e2:	83 e0       	ldi	r24, 0x03	; 3
 8e4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 8e6:	8a e2       	ldi	r24, 0x2A	; 42
 8e8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8ea:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8ec:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 8ee:	de 01       	movw	r26, r28
 8f0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8f2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 8f4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8f6:	51 e2       	ldi	r21, 0x21	; 33
 8f8:	e3 2f       	mov	r30, r19
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	50 93 57 00 	sts	0x0057, r21
 900:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 902:	20 ff       	sbrs	r18, 0
 904:	03 c0       	rjmp	.+6      	; 0x90c <USB_Device_ProcessControlRequest+0x1ca>
					{
						SerialByte >>= 4;
 906:	e2 95       	swap	r30
 908:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 90a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 90c:	ef 70       	andi	r30, 0x0F	; 15
 90e:	8e 2f       	mov	r24, r30
 910:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 912:	ea 30       	cpi	r30, 0x0A	; 10
 914:	10 f0       	brcs	.+4      	; 0x91a <USB_Device_ProcessControlRequest+0x1d8>
 916:	c7 96       	adiw	r24, 0x37	; 55
 918:	01 c0       	rjmp	.+2      	; 0x91c <USB_Device_ProcessControlRequest+0x1da>
 91a:	c0 96       	adiw	r24, 0x30	; 48
 91c:	8d 93       	st	X+, r24
 91e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 920:	2f 5f       	subi	r18, 0xFF	; 255
 922:	24 31       	cpi	r18, 0x14	; 20
 924:	49 f7       	brne	.-46     	; 0x8f8 <USB_Device_ProcessControlRequest+0x1b6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 926:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 928:	80 91 e8 00 	lds	r24, 0x00E8
 92c:	87 7f       	andi	r24, 0xF7	; 247
 92e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 932:	6a e2       	ldi	r22, 0x2A	; 42
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	e2 dc       	rcall	.-1596   	; 0x300 <Endpoint_Write_Control_Stream_LE>
 93c:	13 c0       	rjmp	.+38     	; 0x964 <USB_Device_ProcessControlRequest+0x222>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 93e:	60 91 0a 01 	lds	r22, 0x010A
 942:	70 91 0b 01 	lds	r23, 0x010B
 946:	ae 01       	movw	r20, r28
 948:	4f 5f       	subi	r20, 0xFF	; 255
 94a:	5f 4f       	sbci	r21, 0xFF	; 255
 94c:	5d dc       	rcall	.-1862   	; 0x208 <CALLBACK_USB_GetDescriptor>
 94e:	bc 01       	movw	r22, r24
 950:	89 2b       	or	r24, r25
 952:	c1 f1       	breq	.+112    	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
 954:	90 91 e8 00 	lds	r25, 0x00E8
 958:	97 7f       	andi	r25, 0xF7	; 247
 95a:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	9a 81       	ldd	r25, Y+2	; 0x02
 962:	2a dd       	rcall	.-1452   	; 0x3b8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 964:	80 91 e8 00 	lds	r24, 0x00E8
 968:	8b 77       	andi	r24, 0x7B	; 123
 96a:	80 93 e8 00 	sts	0x00E8, r24
 96e:	2a c0       	rjmp	.+84     	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 970:	80 38       	cpi	r24, 0x80	; 128
 972:	41 f5       	brne	.+80     	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 974:	80 91 e8 00 	lds	r24, 0x00E8
 978:	87 7f       	andi	r24, 0xF7	; 247
 97a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 97e:	80 91 02 01 	lds	r24, 0x0102
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 982:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 986:	80 91 e8 00 	lds	r24, 0x00E8
 98a:	8e 77       	andi	r24, 0x7E	; 126
 98c:	79 cf       	rjmp	.-270    	; 0x880 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 98e:	81 11       	cpse	r24, r1
 990:	19 c0       	rjmp	.+50     	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 992:	90 91 08 01 	lds	r25, 0x0108
 996:	92 30       	cpi	r25, 0x02	; 2
 998:	a8 f4       	brcc	.+42     	; 0x9c4 <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 99a:	80 91 e8 00 	lds	r24, 0x00E8
 99e:	87 7f       	andi	r24, 0xF7	; 247
 9a0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9a4:	90 93 02 01 	sts	0x0102, r25

	Endpoint_ClearStatusStage();
 9a8:	96 dd       	rcall	.-1236   	; 0x4d6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 9aa:	80 91 02 01 	lds	r24, 0x0102
 9ae:	81 11       	cpse	r24, r1
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9b2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9b6:	87 fd       	sbrc	r24, 7
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <USB_Device_ProcessControlRequest+0x27c>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x27e>
 9be:	84 e0       	ldi	r24, 0x04	; 4
 9c0:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 9c2:	db db       	rcall	.-2122   	; 0x17a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9c8:	83 ff       	sbrs	r24, 3
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <USB_Device_ProcessControlRequest+0x29e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9cc:	80 91 e8 00 	lds	r24, 0x00E8
 9d0:	87 7f       	andi	r24, 0xF7	; 247
 9d2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9d6:	80 91 eb 00 	lds	r24, 0x00EB
 9da:	80 62       	ori	r24, 0x20	; 32
 9dc:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 9e0:	aa 96       	adiw	r28, 0x2a	; 42
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	1f 91       	pop	r17
 9f2:	08 95       	ret

000009f4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 9f4:	08 95       	ret

000009f6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 9f6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 9f8:	8e b3       	in	r24, 0x1e	; 30
 9fa:	88 23       	and	r24, r24
 9fc:	99 f0       	breq	.+38     	; 0xa24 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9fe:	c0 91 e9 00 	lds	r28, 0x00E9
 a02:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a04:	90 91 ec 00 	lds	r25, 0x00EC
 a08:	89 2f       	mov	r24, r25
 a0a:	81 70       	andi	r24, 0x01	; 1
 a0c:	90 fd       	sbrc	r25, 0
 a0e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a10:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a12:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a16:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a1a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 a1c:	92 de       	rcall	.-732    	; 0x742 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1e:	cf 70       	andi	r28, 0x0F	; 15
 a20:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <_exit>:
 a28:	f8 94       	cli

00000a2a <__stop_program>:
 a2a:	ff cf       	rjmp	.-2      	; 0xa2a <__stop_program>
