
pad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000a8a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047c1  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000150f  00000000  00000000  000054cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000296d  00000000  00000000  000069dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  0000934c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c99  00000000  00000000  00009984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c04  00000000  00000000  0000b61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000e221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	d8 c2       	rjmp	.+1456   	; 0x5de <__vector_11>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	12 03 4c 00 55 00 46 00 41 00 20 00 50 00 41 00     ..L.U.F.A. .P.A.
  84:	44 00 00 00                                         D...

00000088 <ManufacturerString>:
  88:	1e 03 50 00 6f 00 6c 00 79 00 74 00 65 00 63 00     ..P.o.l.y.t.e.c.
  98:	68 00 20 00 4c 00 69 00 6c 00 6c 00 65 00 00 00     h. .L.i.l.l.e...

000000a8 <LanguageString>:
  a8:	04 03 09 04                                         ....

000000ac <PAD_ConfigurationDescriptor>:
  ac:	09 02 29 00 02 01 00 c0 fa 09 04 00 00 01 ff 00     ..).............
  bc:	00 00 07 05 81 03 08 00 05 09 04 01 00 01 ff 00     ................
  cc:	00 00 07 05 02 03 08 00 05                          .........

000000d5 <PAD_DeviceDescriptor>:
  d5:	12 01 10 01 ff 00 00 08 cd ab 34 12 00 02 01 02     ..........4.....
  e5:	03 01 00                                            ...

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d2 e0       	ldi	r29, 0x02	; 2
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
  f4:	11 e0       	ldi	r17, 0x01	; 1
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	e6 e1       	ldi	r30, 0x16	; 22
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
 100:	05 90       	lpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	ac 30       	cpi	r26, 0x0C	; 12
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	64 d0       	rcall	.+200    	; 0x1e4 <main>
 11c:	7a c4       	rjmp	.+2292   	; 0xa12 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 120:	42 e0       	ldi	r20, 0x02	; 2
 122:	61 ec       	ldi	r22, 0xC1	; 193
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 d1       	rcall	.+800    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>
 128:	42 e0       	ldi	r20, 0x02	; 2
 12a:	60 ec       	ldi	r22, 0xC0	; 192
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8c d1       	rcall	.+792    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 130:	e2 ee       	ldi	r30, 0xE2	; 226
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <SendNextReport>:

}
*/

void SendNextReport(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0xBB;
 146:	8b eb       	ldi	r24, 0xBB	; 187
 148:	89 83       	std	Y+1, r24	; 0x01
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
 14a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
	if(Serial_IsCharReceived())
 14e:	87 ff       	sbrs	r24, 7
 150:	02 c0       	rjmp	.+4      	; 0x156 <SendNextReport+0x1a>
	{
		data = 0xCC;//Serial_ReceiveByte();
 152:	8c ec       	ldi	r24, 0xCC	; 204
 154:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 15c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	}

	Endpoint_SelectEndpoint(PAD_IN_EPADDR);

	if (Endpoint_IsReadWriteAllowed())
 160:	85 ff       	sbrs	r24, 5
 162:	0c c0       	rjmp	.+24     	; 0x17c <SendNextReport+0x40>
	{
		Endpoint_Write_Stream_LE(&data, sizeof(uint8_t), NULL);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	6e d0       	rcall	.+220    	; 0x24e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 172:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 176:	8e 77       	andi	r24, 0x7E	; 126
 178:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		Endpoint_ClearIN();
	}
}
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 18a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

void ReceiveNextReport(void)
{
	Endpoint_SelectEndpoint(PAD_OUT_EPADDR);

	if (Endpoint_IsOUTReceived())
 18e:	82 ff       	sbrs	r24, 2
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <ReceiveNextReport+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 192:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		if (Endpoint_IsReadWriteAllowed())
 196:	85 ff       	sbrs	r24, 5
 198:	08 c0       	rjmp	.+16     	; 0x1aa <ReceiveNextReport+0x26>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 19a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 19e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 1a2:	95 ff       	sbrs	r25, 5
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <ReceiveNextReport+0x1a>
				UDR1 = DataByte;
 1a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 1ae:	8b 77       	andi	r24, 0x7B	; 123
 1b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 1b4:	08 95       	ret

000001b6 <PAD_Task>:
	}
}

void PAD_Task(void)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1b6:	8e b3       	in	r24, 0x1e	; 30
 1b8:	84 30       	cpi	r24, 0x04	; 4
		return;
		
	SendNextReport();
	ReceiveNextReport();
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <PAD_Task+0xa>
 1bc:	bf df       	rcall	.-130    	; 0x13c <SendNextReport>
 1be:	e2 cf       	rjmp	.-60     	; 0x184 <ReceiveNextReport>
 1c0:	08 95       	ret

000001c2 <SetupHardware>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1c2:	87 e6       	ldi	r24, 0x67	; 103
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 1ca:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1d4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1d8:	88 e1       	ldi	r24, 0x18	; 24
 1da:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>

				DDRD  |= (1 << 3);
 1de:	53 9a       	sbi	0x0a, 3	; 10
}

void SetupHardware(void)
{
	Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);
	USB_Init();
 1e0:	5a 9a       	sbi	0x0b, 2	; 11
 1e2:	ee c1       	rjmp	.+988    	; 0x5c0 <USB_Init>

000001e4 <main>:
	SendNextReport();
	ReceiveNextReport();
}
 
int main(void)
{
 1e4:	ee df       	rcall	.-36     	; 0x1c2 <SetupHardware>
 1e6:	78 94       	sei
 1e8:	fb d3       	rcall	.+2038   	; 0x9e0 <USB_USBTask>
 1ea:	e5 df       	rcall	.-54     	; 0x1b6 <PAD_Task>
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <main+0x4>

000001ee <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 1ee:	29 2f       	mov	r18, r25
 1f0:	33 27       	eor	r19, r19
 1f2:	22 30       	cpi	r18, 0x02	; 2
 1f4:	31 05       	cpc	r19, r1
 1f6:	59 f0       	breq	.+22     	; 0x20e <CALLBACK_USB_GetDescriptor+0x20>
 1f8:	23 30       	cpi	r18, 0x03	; 3
 1fa:	31 05       	cpc	r19, r1
 1fc:	69 f0       	breq	.+26     	; 0x218 <CALLBACK_USB_GetDescriptor+0x2a>
 1fe:	21 30       	cpi	r18, 0x01	; 1
 200:	31 05       	cpc	r19, r1
 202:	e9 f4       	brne	.+58     	; 0x23e <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 204:	82 e1       	ldi	r24, 0x12	; 18
 206:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
 208:	25 ed       	ldi	r18, 0xD5	; 213
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	1c c0       	rjmp	.+56     	; 0x246 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 20e:	89 e2       	ldi	r24, 0x29	; 41
 210:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &PAD_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &PAD_ConfigurationDescriptor;
 212:	2c ea       	ldi	r18, 0xAC	; 172
 214:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 216:	17 c0       	rjmp	.+46     	; 0x246 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 218:	99 27       	eor	r25, r25
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 05       	cpc	r25, r1
 21e:	49 f0       	breq	.+18     	; 0x232 <CALLBACK_USB_GetDescriptor+0x44>
 220:	28 f0       	brcs	.+10     	; 0x22c <CALLBACK_USB_GetDescriptor+0x3e>
 222:	02 97       	sbiw	r24, 0x02	; 2
 224:	61 f4       	brne	.+24     	; 0x23e <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 226:	e4 e7       	ldi	r30, 0x74	; 116
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	05 c0       	rjmp	.+10     	; 0x236 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 22c:	e8 ea       	ldi	r30, 0xA8	; 168
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 232:	e8 e8       	ldi	r30, 0x88	; 136
 234:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 236:	84 91       	lpm	r24, Z
 238:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 23a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 23c:	04 c0       	rjmp	.+8      	; 0x246 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 246:	fa 01       	movw	r30, r20
 248:	31 83       	std	Z+1, r19	; 0x01
 24a:	20 83       	st	Z, r18
	return Size;
}
 24c:	08 95       	ret

0000024e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	8b 01       	movw	r16, r22
 262:	7a 01       	movw	r14, r20
 264:	43 d1       	rcall	.+646    	; 0x4ec <Endpoint_WaitUntilReady>
 266:	81 11       	cpse	r24, r1
 268:	33 c0       	rjmp	.+102    	; 0x2d0 <Endpoint_Write_Stream_LE+0x82>
 26a:	e1 14       	cp	r14, r1
 26c:	f1 04       	cpc	r15, r1
 26e:	39 f0       	breq	.+14     	; 0x27e <Endpoint_Write_Stream_LE+0x30>
 270:	f7 01       	movw	r30, r14
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	08 1b       	sub	r16, r24
 278:	19 0b       	sbc	r17, r25
 27a:	c8 0f       	add	r28, r24
 27c:	d9 1f       	adc	r29, r25
 27e:	c1 2c       	mov	r12, r1
 280:	d1 2c       	mov	r13, r1
 282:	01 15       	cp	r16, r1
 284:	11 05       	cpc	r17, r1
 286:	19 f1       	breq	.+70     	; 0x2ce <Endpoint_Write_Stream_LE+0x80>
 288:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 28c:	85 fd       	sbrc	r24, 5
 28e:	16 c0       	rjmp	.+44     	; 0x2bc <Endpoint_Write_Stream_LE+0x6e>
 290:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 294:	8e 77       	andi	r24, 0x7E	; 126
 296:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 29a:	a2 d3       	rcall	.+1860   	; 0x9e0 <USB_USBTask>
 29c:	e1 14       	cp	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	49 f0       	breq	.+18     	; 0x2b4 <Endpoint_Write_Stream_LE+0x66>
 2a2:	f7 01       	movw	r30, r14
 2a4:	80 81       	ld	r24, Z
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	c8 0e       	add	r12, r24
 2aa:	d9 1e       	adc	r13, r25
 2ac:	d1 82       	std	Z+1, r13	; 0x01
 2ae:	c0 82       	st	Z, r12
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <Endpoint_Write_Stream_LE+0x82>
 2b4:	1b d1       	rcall	.+566    	; 0x4ec <Endpoint_WaitUntilReady>
 2b6:	88 23       	and	r24, r24
 2b8:	21 f3       	breq	.-56     	; 0x282 <Endpoint_Write_Stream_LE+0x34>
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <Endpoint_Write_Stream_LE+0x82>
 2bc:	89 91       	ld	r24, Y+
 2be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 2c2:	01 50       	subi	r16, 0x01	; 1
 2c4:	11 09       	sbc	r17, r1
 2c6:	ff ef       	ldi	r31, 0xFF	; 255
 2c8:	cf 1a       	sub	r12, r31
 2ca:	df 0a       	sbc	r13, r31
 2cc:	da cf       	rjmp	.-76     	; 0x282 <Endpoint_Write_Stream_LE+0x34>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret

000002e2 <Endpoint_Write_Control_Stream_LE>:
 2e2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <USB_ControlRequest+0x6>
 2e6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <USB_ControlRequest+0x7>
 2ea:	26 17       	cp	r18, r22
 2ec:	37 07       	cpc	r19, r23
 2ee:	48 f0       	brcs	.+18     	; 0x302 <__stack+0x3>
 2f0:	61 15       	cp	r22, r1
 2f2:	71 05       	cpc	r23, r1
 2f4:	39 f4       	brne	.+14     	; 0x304 <__stack+0x5>
 2f6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2fa:	2e 77       	andi	r18, 0x7E	; 126
 2fc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 300:	01 c0       	rjmp	.+2      	; 0x304 <__stack+0x5>
 302:	b9 01       	movw	r22, r18
 304:	fc 01       	movw	r30, r24
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	61 15       	cp	r22, r1
 30a:	71 05       	cpc	r23, r1
 30c:	59 f1       	breq	.+86     	; 0x364 <__stack+0x65>
 30e:	8e b3       	in	r24, 0x1e	; 30
 310:	88 23       	and	r24, r24
 312:	d1 f1       	breq	.+116    	; 0x388 <__stack+0x89>
 314:	85 30       	cpi	r24, 0x05	; 5
 316:	d1 f1       	breq	.+116    	; 0x38c <__stack+0x8d>
 318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 31c:	83 fd       	sbrc	r24, 3
 31e:	38 c0       	rjmp	.+112    	; 0x390 <__stack+0x91>
 320:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 324:	82 fd       	sbrc	r24, 2
 326:	2a c0       	rjmp	.+84     	; 0x37c <__stack+0x7d>
 328:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 32c:	80 ff       	sbrs	r24, 0
 32e:	ec cf       	rjmp	.-40     	; 0x308 <__stack+0x9>
 330:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	61 15       	cp	r22, r1
 338:	71 05       	cpc	r23, r1
 33a:	51 f0       	breq	.+20     	; 0x350 <__stack+0x51>
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	91 05       	cpc	r25, r1
 340:	38 f4       	brcc	.+14     	; 0x350 <__stack+0x51>
 342:	21 91       	ld	r18, Z+
 344:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 348:	61 50       	subi	r22, 0x01	; 1
 34a:	71 09       	sbc	r23, r1
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	f3 cf       	rjmp	.-26     	; 0x336 <__stack+0x37>
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	08 97       	sbiw	r24, 0x08	; 8
 354:	09 f0       	breq	.+2      	; 0x358 <__stack+0x59>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 35c:	8e 77       	andi	r24, 0x7E	; 126
 35e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 362:	d2 cf       	rjmp	.-92     	; 0x308 <__stack+0x9>
 364:	21 11       	cpse	r18, r1
 366:	d3 cf       	rjmp	.-90     	; 0x30e <__stack+0xf>
 368:	09 c0       	rjmp	.+18     	; 0x37c <__stack+0x7d>
 36a:	8e b3       	in	r24, 0x1e	; 30
 36c:	88 23       	and	r24, r24
 36e:	61 f0       	breq	.+24     	; 0x388 <__stack+0x89>
 370:	85 30       	cpi	r24, 0x05	; 5
 372:	61 f0       	breq	.+24     	; 0x38c <__stack+0x8d>
 374:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 378:	83 fd       	sbrc	r24, 3
 37a:	0a c0       	rjmp	.+20     	; 0x390 <__stack+0x91>
 37c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 380:	82 ff       	sbrs	r24, 2
 382:	f3 cf       	rjmp	.-26     	; 0x36a <__stack+0x6b>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	08 95       	ret
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	08 95       	ret
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	08 95       	ret

00000394 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 394:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <USB_ControlRequest+0x6>
 398:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <USB_ControlRequest+0x7>
 39c:	26 17       	cp	r18, r22
 39e:	37 07       	cpc	r19, r23
 3a0:	48 f0       	brcs	.+18     	; 0x3b4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3a2:	61 15       	cp	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	39 f4       	brne	.+14     	; 0x3b6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3a8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3ac:	2e 77       	andi	r18, 0x7E	; 126
 3ae:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <Endpoint_Write_Control_PStream_LE+0x22>
 3b4:	b9 01       	movw	r22, r18
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	61 f1       	breq	.+88     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3c0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3c2:	88 23       	and	r24, r24
 3c4:	d9 f1       	breq	.+118    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3c6:	85 30       	cpi	r24, 0x05	; 5
 3c8:	d9 f1       	breq	.+118    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 3ce:	83 fd       	sbrc	r24, 3
 3d0:	39 c0       	rjmp	.+114    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 3d6:	82 fd       	sbrc	r24, 2
 3d8:	2b c0       	rjmp	.+86     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 3de:	80 ff       	sbrs	r24, 0
 3e0:	ec cf       	rjmp	.-40     	; 0x3ba <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 3e2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 3e6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3e8:	61 15       	cp	r22, r1
 3ea:	71 05       	cpc	r23, r1
 3ec:	59 f0       	breq	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ee:	88 30       	cpi	r24, 0x08	; 8
 3f0:	91 05       	cpc	r25, r1
 3f2:	40 f4       	brcc	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3f4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3f6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 3fa:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 3fc:	61 50       	subi	r22, 0x01	; 1
 3fe:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	f2 cf       	rjmp	.-28     	; 0x3e8 <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	08 97       	sbiw	r24, 0x08	; 8
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 40c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 410:	8e 77       	andi	r24, 0x7E	; 126
 412:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 416:	d1 cf       	rjmp	.-94     	; 0x3ba <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 418:	21 11       	cpse	r18, r1
 41a:	d2 cf       	rjmp	.-92     	; 0x3c0 <Endpoint_Write_Control_PStream_LE+0x2c>
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 41e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 420:	88 23       	and	r24, r24
 422:	61 f0       	breq	.+24     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 424:	85 30       	cpi	r24, 0x05	; 5
 426:	61 f0       	breq	.+24     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 42c:	83 fd       	sbrc	r24, 3
 42e:	0a c0       	rjmp	.+20     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 430:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 434:	82 ff       	sbrs	r24, 2
 436:	f3 cf       	rjmp	.-26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 444:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 446:	08 95       	ret

00000448 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 448:	98 2f       	mov	r25, r24
 44a:	95 30       	cpi	r25, 0x05	; 5
 44c:	68 f5       	brcc	.+90     	; 0x4a8 <Endpoint_ConfigureEndpoint_Prv+0x60>
 44e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 452:	98 17       	cp	r25, r24
 454:	39 f0       	breq	.+14     	; 0x464 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 456:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 45a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 45e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 462:	03 c0       	rjmp	.+6      	; 0x46a <Endpoint_ConfigureEndpoint_Prv+0x22>
 464:	24 2f       	mov	r18, r20
 466:	76 2f       	mov	r23, r22
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	21 fd       	sbrc	r18, 1
 46c:	02 c0       	rjmp	.+4      	; 0x472 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	ec cf       	rjmp	.-40     	; 0x44a <Endpoint_ConfigureEndpoint_Prv+0x2>
 472:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 476:	3e 7f       	andi	r19, 0xFE	; 254
 478:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 47c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 480:	3d 7f       	andi	r19, 0xFD	; 253
 482:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 486:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 48a:	31 60       	ori	r19, 0x01	; 1
 48c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 490:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 494:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 498:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 49c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 4a0:	27 fd       	sbrc	r18, 7
 4a2:	e5 cf       	rjmp	.-54     	; 0x46e <Endpoint_ConfigureEndpoint_Prv+0x26>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret

000004b2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_ControlRequest>
 4b6:	87 ff       	sbrs	r24, 7
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 4be:	82 fd       	sbrc	r24, 2
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4c2:	8e b3       	in	r24, 0x1e	; 30
 4c4:	81 11       	cpse	r24, r1
 4c6:	f9 cf       	rjmp	.-14     	; 0x4ba <Endpoint_ClearStatusStage+0x8>
 4c8:	10 c0       	rjmp	.+32     	; 0x4ea <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4ce:	8b 77       	andi	r24, 0x7B	; 123
 4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4d2:	8e b3       	in	r24, 0x1e	; 30
 4d4:	88 23       	and	r24, r24
 4d6:	49 f0       	breq	.+18     	; 0x4ea <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4dc:	80 ff       	sbrs	r24, 0
 4de:	f9 cf       	rjmp	.-14     	; 0x4d2 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4e4:	8e 77       	andi	r24, 0x7E	; 126
 4e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4ea:	08 95       	ret

000004ec <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 4ec:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 4f0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 4f4:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 4f6:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 4fa:	84 2f       	mov	r24, r20
 4fc:	81 70       	andi	r24, 0x01	; 1
 4fe:	40 ff       	sbrs	r20, 0
 500:	22 c0       	rjmp	.+68     	; 0x546 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 502:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 506:	80 fd       	sbrc	r24, 0
 508:	1c c0       	rjmp	.+56     	; 0x542 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 50a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 50c:	88 23       	and	r24, r24
 50e:	99 f0       	breq	.+38     	; 0x536 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 510:	85 30       	cpi	r24, 0x05	; 5
 512:	99 f0       	breq	.+38     	; 0x53a <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 518:	85 fd       	sbrc	r24, 5
 51a:	11 c0       	rjmp	.+34     	; 0x53e <Endpoint_WaitUntilReady+0x52>
 51c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 520:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 524:	24 17       	cp	r18, r20
 526:	35 07       	cpc	r19, r21
 528:	31 f3       	breq	.-52     	; 0x4f6 <Endpoint_WaitUntilReady+0xa>
 52a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 52c:	11 f0       	breq	.+4      	; 0x532 <Endpoint_WaitUntilReady+0x46>
 52e:	9a 01       	movw	r18, r20
 530:	e2 cf       	rjmp	.-60     	; 0x4f6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 546:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 54a:	42 ff       	sbrs	r20, 2
 54c:	de cf       	rjmp	.-68     	; 0x50a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 54e:	08 95       	ret

00000550 <USB_ResetInterface>:
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 550:	40 d0       	rcall	.+128    	; 0x5d2 <USB_INT_DisableAllInterrupts>
 552:	42 d0       	rcall	.+132    	; 0x5d8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 554:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 558:	8f 77       	andi	r24, 0x7F	; 127
 55a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 55e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 562:	80 68       	ori	r24, 0x80	; 128
 564:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 568:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 56c:	8f 7d       	andi	r24, 0xDF	; 223
 56e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 576:	86 e0       	ldi	r24, 0x06	; 6
 578:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 57a:	09 b4       	in	r0, 0x29	; 41
 57c:	00 fe       	sbrs	r0, 0
 57e:	fd cf       	rjmp	.-6      	; 0x57a <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 580:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 582:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 586:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 58a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 58e:	42 e0       	ldi	r20, 0x02	; 2
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	59 df       	rcall	.-334    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 596:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 59a:	8e 7f       	andi	r24, 0xFE	; 254
 59c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5a4:	81 60       	ori	r24, 0x01	; 1
 5a6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5aa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5b4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 5be:	08 95       	ret

000005c0 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 5c0:	e3 e6       	ldi	r30, 0x63	; 99
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	8e 7f       	andi	r24, 0xFE	; 254
 5c8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_IsInitialized>
 5d0:	bf cf       	rjmp	.-130    	; 0x550 <USB_ResetInterface>

000005d2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5d2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5d6:	08 95       	ret

000005d8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 5d8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5dc:	08 95       	ret

000005de <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 600:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 604:	82 ff       	sbrs	r24, 2
 606:	0a c0       	rjmp	.+20     	; 0x61c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 608:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 60c:	82 ff       	sbrs	r24, 2
 60e:	06 c0       	rjmp	.+12     	; 0x61c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 610:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 61a:	e1 d1       	rcall	.+962    	; 0x9de <USB_Event_Stub>
 61c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 620:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 622:	16 c0       	rjmp	.+44     	; 0x650 <__vector_11+0x72>
 624:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 628:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 62a:	12 c0       	rjmp	.+36     	; 0x650 <__vector_11+0x72>
 62c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 636:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 63a:	80 61       	ori	r24, 0x10	; 16
 63c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 640:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 644:	80 62       	ori	r24, 0x20	; 32
 646:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
 64a:	19 bc       	out	0x29, r1	; 41
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 64c:	1e ba       	out	0x1e, r1	; 30
 64e:	c7 d1       	rcall	.+910    	; 0x9de <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 650:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 654:	84 ff       	sbrs	r24, 4
 656:	2e c0       	rjmp	.+92     	; 0x6b4 <__vector_11+0xd6>
 658:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 65c:	84 ff       	sbrs	r24, 4
 65e:	2a c0       	rjmp	.+84     	; 0x6b4 <__vector_11+0xd6>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 664:	86 e0       	ldi	r24, 0x06	; 6
 666:	89 bd       	out	0x29, r24	; 41
 668:	09 b4       	in	r0, 0x29	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 66a:	00 fe       	sbrs	r0, 0
 66c:	fd cf       	rjmp	.-6      	; 0x668 <__vector_11+0x8a>
 66e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 672:	8f 7d       	andi	r24, 0xDF	; 223
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 674:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 678:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 67c:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 67e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 682:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 686:	8f 7e       	andi	r24, 0xEF	; 239
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 688:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 68c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 690:	81 60       	ori	r24, 0x01	; 1
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 692:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 696:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
		  USB_DeviceState = DEVICE_STATE_Configured;
 69a:	88 23       	and	r24, r24
 69c:	11 f0       	breq	.+4      	; 0x6a2 <__vector_11+0xc4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6a2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 6a6:	87 fd       	sbrc	r24, 7
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__vector_11+0xd0>
 6aa:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__vector_11+0xd2>
 6ae:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6b0:	8e bb       	out	0x1e, r24	; 30
 6b2:	95 d1       	rcall	.+810    	; 0x9de <USB_Event_Stub>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6b4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6b8:	83 ff       	sbrs	r24, 3
 6ba:	21 c0       	rjmp	.+66     	; 0x6fe <__vector_11+0x120>
 6bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6c0:	83 ff       	sbrs	r24, 3
 6c2:	1d c0       	rjmp	.+58     	; 0x6fe <__vector_11+0x120>
 6c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6c8:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6ca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_Device_ConfigurationNumber = 0;
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	8e bb       	out	0x1e, r24	; 30
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 6d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6da:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6e4:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 6ee:	80 61       	ori	r24, 0x10	; 16
 6f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6f4:	42 e0       	ldi	r20, 0x02	; 2
 6f6:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	a6 de       	rcall	.-692    	; 0x448 <Endpoint_ConfigureEndpoint_Prv>
 6fc:	70 d1       	rcall	.+736    	; 0x9de <USB_Event_Stub>
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	bf 91       	pop	r27
 704:	af 91       	pop	r26
 706:	9f 91       	pop	r25
 708:	8f 91       	pop	r24
 70a:	7f 91       	pop	r23
 70c:	6f 91       	pop	r22
 70e:	5f 91       	pop	r21
 710:	4f 91       	pop	r20
 712:	3f 91       	pop	r19
 714:	2f 91       	pop	r18
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	aa 97       	sbiw	r28, 0x2a	; 42
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	e4 e0       	ldi	r30, 0x04	; 4
 738:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 73a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 73e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	ec 30       	cpi	r30, 0x0C	; 12
 744:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 746:	c9 f7       	brne	.-14     	; 0x73a <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 748:	4a d1       	rcall	.+660    	; 0x9de <USB_Event_Stub>
 74a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 74e:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 750:	2e c1       	rjmp	.+604    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 752:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 756:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <USB_ControlRequest+0x1>
 75a:	95 30       	cpi	r25, 0x05	; 5
 75c:	09 f4       	brne	.+2      	; 0x760 <USB_Device_ProcessControlRequest+0x40>
 75e:	83 c0       	rjmp	.+262    	; 0x866 <USB_Device_ProcessControlRequest+0x146>
 760:	30 f4       	brcc	.+12     	; 0x76e <USB_Device_ProcessControlRequest+0x4e>
 762:	91 30       	cpi	r25, 0x01	; 1
 764:	a9 f1       	breq	.+106    	; 0x7d0 <USB_Device_ProcessControlRequest+0xb0>
 766:	68 f0       	brcs	.+26     	; 0x782 <USB_Device_ProcessControlRequest+0x62>
 768:	93 30       	cpi	r25, 0x03	; 3
 76a:	91 f1       	breq	.+100    	; 0x7d0 <USB_Device_ProcessControlRequest+0xb0>
 76c:	20 c1       	rjmp	.+576    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 76e:	98 30       	cpi	r25, 0x08	; 8
 770:	09 f4       	brne	.+2      	; 0x774 <USB_Device_ProcessControlRequest+0x54>
 772:	ee c0       	rjmp	.+476    	; 0x950 <USB_Device_ProcessControlRequest+0x230>
 774:	99 30       	cpi	r25, 0x09	; 9
 776:	09 f4       	brne	.+2      	; 0x77a <USB_Device_ProcessControlRequest+0x5a>
 778:	fa c0       	rjmp	.+500    	; 0x96e <USB_Device_ProcessControlRequest+0x24e>
 77a:	96 30       	cpi	r25, 0x06	; 6
 77c:	09 f0       	breq	.+2      	; 0x780 <USB_Device_ProcessControlRequest+0x60>
 77e:	17 c1       	rjmp	.+558    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 780:	93 c0       	rjmp	.+294    	; 0x8a8 <USB_Device_ProcessControlRequest+0x188>
 782:	80 38       	cpi	r24, 0x80	; 128
 784:	21 f0       	breq	.+8      	; 0x78e <USB_Device_ProcessControlRequest+0x6e>
 786:	82 38       	cpi	r24, 0x82	; 130
 788:	09 f0       	breq	.+2      	; 0x78c <USB_Device_ProcessControlRequest+0x6c>
 78a:	11 c1       	rjmp	.+546    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 78c:	08 c0       	rjmp	.+16     	; 0x79e <USB_Device_ProcessControlRequest+0x7e>
 78e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 792:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 796:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 798:	89 f0       	breq	.+34     	; 0x7bc <USB_Device_ProcessControlRequest+0x9c>
 79a:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 79c:	0f c0       	rjmp	.+30     	; 0x7bc <USB_Device_ProcessControlRequest+0x9c>
 79e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7a2:	8f 70       	andi	r24, 0x0F	; 15
 7a4:	85 30       	cpi	r24, 0x05	; 5
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7a8:	02 c1       	rjmp	.+516    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 7aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7ae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 7b2:	85 fb       	bst	r24, 5
 7b4:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7b6:	80 f9       	bld	r24, 0
 7b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7bc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 7c0:	97 7f       	andi	r25, 0xF7	; 247
 7c2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 7c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 7ca:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7ce:	cb c0       	rjmp	.+406    	; 0x966 <USB_Device_ProcessControlRequest+0x246>
 7d0:	28 2f       	mov	r18, r24
 7d2:	2d 7f       	andi	r18, 0xFD	; 253
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7d6:	eb c0       	rjmp	.+470    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 7d8:	88 23       	and	r24, r24
 7da:	19 f0       	breq	.+6      	; 0x7e2 <USB_Device_ProcessControlRequest+0xc2>
 7dc:	82 30       	cpi	r24, 0x02	; 2
 7de:	61 f0       	breq	.+24     	; 0x7f8 <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7e0:	e6 c0       	rjmp	.+460    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 7e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x2>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	09 f0       	breq	.+2      	; 0x7ec <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7ea:	e1 c0       	rjmp	.+450    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 7ec:	93 30       	cpi	r25, 0x03	; 3
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <USB_Device_ProcessControlRequest+0xd2>
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7f6:	2e c0       	rjmp	.+92     	; 0x854 <USB_Device_ProcessControlRequest+0x134>
 7f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x2>
 7fc:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7fe:	2a c0       	rjmp	.+84     	; 0x854 <USB_Device_ProcessControlRequest+0x134>
 800:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 804:	8f 70       	andi	r24, 0x0F	; 15
 806:	2f ef       	ldi	r18, 0xFF	; 255
 808:	28 0f       	add	r18, r24
 80a:	24 30       	cpi	r18, 0x04	; 4
 80c:	08 f0       	brcs	.+2      	; 0x810 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 80e:	cf c0       	rjmp	.+414    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 810:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 814:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 818:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 81a:	1c c0       	rjmp	.+56     	; 0x854 <USB_Device_ProcessControlRequest+0x134>
 81c:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 81e:	21 f4       	brne	.+8      	; 0x828 <USB_Device_ProcessControlRequest+0x108>
 820:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 824:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 826:	14 c0       	rjmp	.+40     	; 0x850 <USB_Device_ProcessControlRequest+0x130>
 828:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 82c:	90 61       	ori	r25, 0x10	; 16
 82e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	a9 01       	movw	r20, r18
 838:	02 c0       	rjmp	.+4      	; 0x83e <USB_Device_ProcessControlRequest+0x11e>
 83a:	44 0f       	add	r20, r20
 83c:	55 1f       	adc	r21, r21
 83e:	8a 95       	dec	r24
 840:	e2 f7       	brpl	.-8      	; 0x83a <USB_Device_ProcessControlRequest+0x11a>
 842:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 846:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 84a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 84e:	88 60       	ori	r24, 0x08	; 8
 850:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 854:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 858:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 85c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 85e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 862:	27 de       	rcall	.-946    	; 0x4b2 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 864:	a4 c0       	rjmp	.+328    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 866:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 868:	a2 c0       	rjmp	.+324    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 86a:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 86e:	1f 77       	andi	r17, 0x7F	; 127
 870:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 874:	80 78       	andi	r24, 0x80	; 128
 876:	81 2b       	or	r24, r17
 878:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 87c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 880:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 882:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 886:	15 de       	rcall	.-982    	; 0x4b2 <Endpoint_ClearStatusStage>
 888:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 88c:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 88e:	fc cf       	rjmp	.-8      	; 0x888 <USB_Device_ProcessControlRequest+0x168>
 890:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 894:	80 68       	ori	r24, 0x80	; 128
 896:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 89a:	11 11       	cpse	r17, r1
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <USB_Device_ProcessControlRequest+0x182>
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <USB_Device_ProcessControlRequest+0x184>
 8a2:	83 e0       	ldi	r24, 0x03	; 3
 8a4:	8e bb       	out	0x1e, r24	; 30
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8a6:	83 c0       	rjmp	.+262    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 8a8:	80 58       	subi	r24, 0x80	; 128
 8aa:	82 30       	cpi	r24, 0x02	; 2
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <USB_Device_ProcessControlRequest+0x190>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8ae:	7f c0       	rjmp	.+254    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 8b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x2>
 8b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <USB_ControlRequest+0x3>
 8b8:	8c 3d       	cpi	r24, 0xDC	; 220
 8ba:	53 e0       	ldi	r21, 0x03	; 3
 8bc:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8be:	71 f5       	brne	.+92     	; 0x91c <USB_Device_ProcessControlRequest+0x1fc>
 8c0:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 8c2:	8a 83       	std	Y+2, r24	; 0x02
 8c4:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8c6:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8c8:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 8ca:	f8 94       	cli
 8cc:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8ce:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 8d0:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8d2:	3e e0       	ldi	r19, 0x0E	; 14
 8d4:	51 e2       	ldi	r21, 0x21	; 33
 8d6:	e3 2f       	mov	r30, r19
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>

					if (SerialCharNum & 0x01)
 8de:	e4 91       	lpm	r30, Z
 8e0:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <USB_Device_ProcessControlRequest+0x1ca>
 8e4:	e2 95       	swap	r30
						SigReadAddress++;
 8e6:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 8e8:	3f 5f       	subi	r19, 0xFF	; 255
 8ea:	ef 70       	andi	r30, 0x0F	; 15
 8ec:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	ea 30       	cpi	r30, 0x0A	; 10
 8f2:	10 f0       	brcs	.+4      	; 0x8f8 <USB_Device_ProcessControlRequest+0x1d8>
 8f4:	c7 96       	adiw	r24, 0x37	; 55
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <USB_Device_ProcessControlRequest+0x1da>
 8f8:	c0 96       	adiw	r24, 0x30	; 48
 8fa:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8fc:	9d 93       	st	X+, r25
 8fe:	2f 5f       	subi	r18, 0xFF	; 255
 900:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 902:	49 f7       	brne	.-46     	; 0x8d6 <USB_Device_ProcessControlRequest+0x1b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 904:	4f bf       	out	0x3f, r20	; 63
 906:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 90a:	87 7f       	andi	r24, 0xF7	; 247
 90c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 910:	6a e2       	ldi	r22, 0x2A	; 42
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	ce 01       	movw	r24, r28
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	e4 dc       	rcall	.-1592   	; 0x2e2 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 91a:	14 c0       	rjmp	.+40     	; 0x944 <USB_Device_ProcessControlRequest+0x224>
 91c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <USB_ControlRequest+0x4>
 920:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <USB_ControlRequest+0x5>
 924:	ae 01       	movw	r20, r28
 926:	4f 5f       	subi	r20, 0xFF	; 255
 928:	5f 4f       	sbci	r21, 0xFF	; 255
 92a:	61 dc       	rcall	.-1854   	; 0x1ee <CALLBACK_USB_GetDescriptor>
 92c:	bc 01       	movw	r22, r24
 92e:	89 2b       	or	r24, r25
 930:	09 f4       	brne	.+2      	; 0x934 <USB_Device_ProcessControlRequest+0x214>
 932:	3d c0       	rjmp	.+122    	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 934:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 938:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 93a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 942:	28 dd       	rcall	.-1456   	; 0x394 <Endpoint_Write_Control_PStream_LE>
 944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 948:	8b 77       	andi	r24, 0x7B	; 123
 94a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 94e:	2f c0       	rjmp	.+94     	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 950:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 952:	69 f5       	brne	.+90     	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 958:	87 7f       	andi	r24, 0xF7	; 247
 95a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 95e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 962:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 966:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 96a:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 96c:	78 cf       	rjmp	.-272    	; 0x85e <USB_Device_ProcessControlRequest+0x13e>
 96e:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 970:	1e c0       	rjmp	.+60     	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 972:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x2>
 976:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <USB_ControlRequest+0x3>
 97a:	99 27       	eor	r25, r25
 97c:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 97e:	bc f4       	brge	.+46     	; 0x9ae <USB_Device_ProcessControlRequest+0x28e>
 980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 984:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 986:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 98a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 98e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>

	if (USB_Device_ConfigurationNumber)
 992:	8f dd       	rcall	.-1250   	; 0x4b2 <Endpoint_ClearStatusStage>
 994:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 998:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <USB_Device_ProcessControlRequest+0x288>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 99c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 9a0:	87 fd       	sbrc	r24, 7
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <USB_Device_ProcessControlRequest+0x288>
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0x28a>

	EVENT_USB_Device_ConfigurationChanged();
 9a8:	84 e0       	ldi	r24, 0x04	; 4
 9aa:	8e bb       	out	0x1e, r24	; 30
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ac:	b9 db       	rcall	.-2190   	; 0x120 <EVENT_USB_Device_ConfigurationChanged>
 9ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9b2:	83 ff       	sbrs	r24, 3
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b4:	0a c0       	rjmp	.+20     	; 0x9ca <USB_Device_ProcessControlRequest+0x2aa>
 9b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9ba:	87 7f       	andi	r24, 0xF7	; 247
 9bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9c0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9c4:	80 62       	ori	r24, 0x20	; 32
 9c6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 9ca:	aa 96       	adiw	r28, 0x2a	; 42
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	08 95       	ret

000009de <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 9de:	08 95       	ret

000009e0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 9e0:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 9e2:	8e b3       	in	r24, 0x1e	; 30
 9e4:	88 23       	and	r24, r24
 9e6:	99 f0       	breq	.+38     	; 0xa0e <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9e8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 9ec:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 9ee:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 9f2:	89 2f       	mov	r24, r25
 9f4:	81 70       	andi	r24, 0x01	; 1
 9f6:	90 fd       	sbrc	r25, 0
 9f8:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9fa:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9fc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 a04:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a06:	8c de       	rcall	.-744    	; 0x720 <USB_Device_ProcessControlRequest>
 a08:	cf 70       	andi	r28, 0x0F	; 15
 a0a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <_exit>:
 a12:	f8 94       	cli

00000a14 <__stop_program>:
 a14:	ff cf       	rjmp	.-2      	; 0xa14 <__stop_program>
