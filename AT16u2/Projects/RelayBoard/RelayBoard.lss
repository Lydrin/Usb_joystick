
RelayBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000009e6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003119  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb2  00000000  00000000  00003d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f8b  00000000  00000000  00004bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00006b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000160b  00000000  00000000  00006eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a3  00000000  00000000  000084b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000985a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e1 c2       	rjmp	.+1474   	; 0x5f0 <__vector_11>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop

00000074 <RelayBoard_SerialString>:
  74:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00           ..0.0.0.0.1...

00000082 <RelayBoard_ProductString>:
  82:	16 03 52 00 65 00 6c 00 61 00 79 00 42 00 6f 00     ..R.e.l.a.y.B.o.
  92:	61 00 72 00 64 00 00 00                             a.r.d...

0000009a <RelayBoard_ManufacturerString>:
  9a:	0c 03 53 00 49 00 53 00 50 00 4d 00 00 00           ..S.I.S.P.M...

000000a8 <RelayBoard_LanguageString>:
  a8:	04 03 09 04                                         ....

000000ac <RelayBoard_ConfigurationDescriptor>:
  ac:	09 02 12 00 01 01 00 80 fa 09 04 00 00 00 ff 00     ................
  bc:	00 00                                               ..

000000be <RelayBoard_DeviceDescriptor>:
  be:	12 01 10 01 ff 00 00 08 b4 04 11 fd 00 02 01 02     ................
  ce:	03 01                                               ..

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d2 e0       	ldi	r29, 0x02	; 2
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	e2 e7       	ldi	r30, 0x72	; 114
  e4:	f9 e0       	ldi	r31, 0x09	; 9
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
  e8:	05 90       	lpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 30       	cpi	r26, 0x00	; 0
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	ac 30       	cpi	r26, 0x0C	; 12
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	21 d0       	rcall	.+66     	; 0x146 <main>
 104:	34 c4       	rjmp	.+2152   	; 0x96e <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the project's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 108:	84 b7       	in	r24, 0x34	; 52
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	a8 95       	wdr
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	80 93 60 00 	sts	0x0060, r24
 11e:	10 92 60 00 	sts	0x0060, r1
 122:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	80 93 61 00 	sts	0x0061, r24
 130:	90 93 61 00 	sts	0x0061, r25
 134:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	USB_Init();
 136:	4d d2       	rcall	.+1178   	; 0x5d2 <USB_Init>

	/* Initialize Relays */
	DDRC  |=  ALL_RELAYS;
 138:	87 b1       	in	r24, 0x07	; 7
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~ALL_RELAYS;
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	88 b9       	out	0x08, r24	; 8
 144:	08 95       	ret

00000146 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 146:	e0 df       	rcall	.-64     	; 0x108 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 148:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	  USB_USBTask();
 14a:	09 d4       	rcall	.+2066   	; 0x95e <USB_USBTask>
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0x4>

0000014e <EVENT_USB_Device_ControlRequest>:
	PORTC &= ~ALL_RELAYS;
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	27 97       	sbiw	r28, 0x07	; 7
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
    const uint8_t SerialNumber[5] = { 0, 0, 0, 0, 1 };
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	1a 82       	std	Y+2, r1	; 0x02
 166:	1b 82       	std	Y+3, r1	; 0x03
 168:	1c 82       	std	Y+4, r1	; 0x04
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t ControlData[2]        = { 0, 0 };
 16e:	1e 82       	std	Y+6, r1	; 0x06
 170:	1f 82       	std	Y+7, r1	; 0x07

    switch (USB_ControlRequest.bRequest)
 172:	80 91 05 01 	lds	r24, 0x0105
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	09 f4       	brne	.+2      	; 0x17c <EVENT_USB_Device_ControlRequest+0x2e>
 17a:	4a c0       	rjmp	.+148    	; 0x210 <EVENT_USB_Device_ControlRequest+0xc2>
 17c:	89 30       	cpi	r24, 0x09	; 9
 17e:	09 f0       	breq	.+2      	; 0x182 <EVENT_USB_Device_ControlRequest+0x34>
 180:	92 c0       	rjmp	.+292    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
	{
		case 0x09:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 182:	80 91 04 01 	lds	r24, 0x0104
 186:	81 32       	cpi	r24, 0x21	; 33
 188:	09 f0       	breq	.+2      	; 0x18c <EVENT_USB_Device_ControlRequest+0x3e>
 18a:	8d c0       	rjmp	.+282    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
				PORTD = ((PORTD | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	89 b9       	out	0x09, r24	; 9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 190:	80 91 e8 00 	lds	r24, 0x00E8
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	80 93 e8 00 	sts	0x00E8, r24
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				Endpoint_Read_Control_Stream_LE(ControlData, sizeof(ControlData));
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	ce 01       	movw	r24, r28
 1a0:	06 96       	adiw	r24, 0x06	; 6
 1a2:	1e d1       	rcall	.+572    	; 0x3e0 <Endpoint_Read_Control_Stream_LE>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 1a4:	80 91 e8 00 	lds	r24, 0x00E8
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				switch (USB_ControlRequest.wValue)
 1ae:	80 91 06 01 	lds	r24, 0x0106
 1b2:	90 91 07 01 	lds	r25, 0x0107
 1b6:	86 30       	cpi	r24, 0x06	; 6
 1b8:	23 e0       	ldi	r18, 0x03	; 3
 1ba:	92 07       	cpc	r25, r18
 1bc:	a1 f0       	breq	.+40     	; 0x1e6 <EVENT_USB_Device_ControlRequest+0x98>
 1be:	20 f4       	brcc	.+8      	; 0x1c8 <EVENT_USB_Device_ControlRequest+0x7a>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	93 40       	sbci	r25, 0x03	; 3
 1c4:	49 f0       	breq	.+18     	; 0x1d8 <EVENT_USB_Device_ControlRequest+0x8a>
 1c6:	6f c0       	rjmp	.+222    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 1c8:	89 30       	cpi	r24, 0x09	; 9
 1ca:	23 e0       	ldi	r18, 0x03	; 3
 1cc:	92 07       	cpc	r25, r18
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <EVENT_USB_Device_ControlRequest+0xa6>
 1d0:	8c 30       	cpi	r24, 0x0C	; 12
 1d2:	93 40       	sbci	r25, 0x03	; 3
 1d4:	b1 f0       	breq	.+44     	; 0x202 <EVENT_USB_Device_ControlRequest+0xb4>
 1d6:	67 c0       	rjmp	.+206    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
				{
					case 0x303:
						if (ControlData[1]) PORTC &= ~RELAY1; else PORTC |= RELAY1;
 1d8:	8f 81       	ldd	r24, Y+7	; 0x07
 1da:	88 23       	and	r24, r24
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <EVENT_USB_Device_ControlRequest+0x94>
 1de:	47 98       	cbi	0x08, 7	; 8
 1e0:	62 c0       	rjmp	.+196    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 1e2:	47 9a       	sbi	0x08, 7	; 8
 1e4:	60 c0       	rjmp	.+192    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
						break;
					case 0x306:
						if (ControlData[1]) PORTC &= ~RELAY2; else PORTC |= RELAY2;
 1e6:	8f 81       	ldd	r24, Y+7	; 0x07
 1e8:	88 23       	and	r24, r24
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <EVENT_USB_Device_ControlRequest+0xa2>
 1ec:	46 98       	cbi	0x08, 6	; 8
 1ee:	5b c0       	rjmp	.+182    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 1f0:	46 9a       	sbi	0x08, 6	; 8
 1f2:	59 c0       	rjmp	.+178    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
						break;
					case 0x309:
						if (ControlData[1]) PORTC &= ~RELAY3; else PORTC |= RELAY3;
 1f4:	8f 81       	ldd	r24, Y+7	; 0x07
 1f6:	88 23       	and	r24, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <EVENT_USB_Device_ControlRequest+0xb0>
 1fa:	45 98       	cbi	0x08, 5	; 8
 1fc:	54 c0       	rjmp	.+168    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 1fe:	45 9a       	sbi	0x08, 5	; 8
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
						break;
					case 0x30c:
						if (ControlData[1]) PORTC &= ~RELAY4; else PORTC |= RELAY4;
 202:	8f 81       	ldd	r24, Y+7	; 0x07
 204:	88 23       	and	r24, r24
 206:	11 f0       	breq	.+4      	; 0x20c <EVENT_USB_Device_ControlRequest+0xbe>
 208:	44 98       	cbi	0x08, 4	; 8
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 20c:	44 9a       	sbi	0x08, 4	; 8
 20e:	4b c0       	rjmp	.+150    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
				}
			}

			break;
		case 0x01:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 210:	80 91 04 01 	lds	r24, 0x0104
 214:	81 3a       	cpi	r24, 0xA1	; 161
 216:	09 f0       	breq	.+2      	; 0x21a <EVENT_USB_Device_ControlRequest+0xcc>
 218:	46 c0       	rjmp	.+140    	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x158>
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	89 b9       	out	0x09, r24	; 9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 21e:	80 91 e8 00 	lds	r24, 0x00E8
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	80 93 e8 00 	sts	0x00E8, r24
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				switch (USB_ControlRequest.wValue)
 228:	80 91 06 01 	lds	r24, 0x0106
 22c:	90 91 07 01 	lds	r25, 0x0107
 230:	86 30       	cpi	r24, 0x06	; 6
 232:	23 e0       	ldi	r18, 0x03	; 3
 234:	92 07       	cpc	r25, r18
 236:	f1 f0       	breq	.+60     	; 0x274 <EVENT_USB_Device_ControlRequest+0x126>
 238:	78 f4       	brcc	.+30     	; 0x258 <EVENT_USB_Device_ControlRequest+0x10a>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	23 e0       	ldi	r18, 0x03	; 3
 23e:	92 07       	cpc	r25, r18
 240:	99 f0       	breq	.+38     	; 0x268 <EVENT_USB_Device_ControlRequest+0x11a>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	93 40       	sbci	r25, 0x03	; 3
 246:	11 f5       	brne	.+68     	; 0x28c <EVENT_USB_Device_ControlRequest+0x13e>
				{
					case 0x301:
						Endpoint_Write_Control_Stream_LE(SerialNumber, sizeof(SerialNumber));
						break;
					case 0x303:
						ControlData[1] = (PORTC & RELAY1) ? 2 : 3;
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	88 1f       	adc	r24, r24
 24c:	88 27       	eor	r24, r24
 24e:	88 1f       	adc	r24, r24
 250:	93 e0       	ldi	r25, 0x03	; 3
 252:	98 1b       	sub	r25, r24
 254:	89 2f       	mov	r24, r25
 256:	19 c0       	rjmp	.+50     	; 0x28a <EVENT_USB_Device_ControlRequest+0x13c>
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				switch (USB_ControlRequest.wValue)
 258:	89 30       	cpi	r24, 0x09	; 9
 25a:	23 e0       	ldi	r18, 0x03	; 3
 25c:	92 07       	cpc	r25, r18
 25e:	69 f0       	breq	.+26     	; 0x27a <EVENT_USB_Device_ControlRequest+0x12c>
 260:	8c 30       	cpi	r24, 0x0C	; 12
 262:	93 40       	sbci	r25, 0x03	; 3
 264:	69 f0       	breq	.+26     	; 0x280 <EVENT_USB_Device_ControlRequest+0x132>
 266:	12 c0       	rjmp	.+36     	; 0x28c <EVENT_USB_Device_ControlRequest+0x13e>
				{
					case 0x301:
						Endpoint_Write_Control_Stream_LE(SerialNumber, sizeof(SerialNumber));
 268:	65 e0       	ldi	r22, 0x05	; 5
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	5b d0       	rcall	.+182    	; 0x328 <Endpoint_Write_Control_Stream_LE>
						break;
 272:	0c c0       	rjmp	.+24     	; 0x28c <EVENT_USB_Device_ControlRequest+0x13e>
					case 0x303:
						ControlData[1] = (PORTC & RELAY1) ? 2 : 3;
						break;
					case 0x306:
						ControlData[1] = (PORTC & RELAY2) ? 2 : 3;
 274:	46 99       	sbic	0x08, 6	; 8
 276:	08 c0       	rjmp	.+16     	; 0x288 <EVENT_USB_Device_ControlRequest+0x13a>
 278:	05 c0       	rjmp	.+10     	; 0x284 <EVENT_USB_Device_ControlRequest+0x136>
						break;
					case 0x309:
						ControlData[1] = (PORTC & RELAY3) ? 2 : 3;
 27a:	45 99       	sbic	0x08, 5	; 8
 27c:	05 c0       	rjmp	.+10     	; 0x288 <EVENT_USB_Device_ControlRequest+0x13a>
 27e:	02 c0       	rjmp	.+4      	; 0x284 <EVENT_USB_Device_ControlRequest+0x136>
						break;
					case 0x30c:
						ControlData[1] = (PORTC & RELAY4) ? 2 : 3;
 280:	44 99       	sbic	0x08, 4	; 8
 282:	02 c0       	rjmp	.+4      	; 0x288 <EVENT_USB_Device_ControlRequest+0x13a>
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	01 c0       	rjmp	.+2      	; 0x28a <EVENT_USB_Device_ControlRequest+0x13c>
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	8f 83       	std	Y+7, r24	; 0x07
						break;
				}

				if (ControlData[1])
 28c:	8f 81       	ldd	r24, Y+7	; 0x07
 28e:	88 23       	and	r24, r24
 290:	29 f0       	breq	.+10     	; 0x29c <EVENT_USB_Device_ControlRequest+0x14e>
				  Endpoint_Write_Control_Stream_LE(ControlData, sizeof(ControlData));
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	ce 01       	movw	r24, r28
 298:	06 96       	adiw	r24, 0x06	; 6
 29a:	46 d0       	rcall	.+140    	; 0x328 <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 29c:	80 91 e8 00 	lds	r24, 0x00E8
 2a0:	8b 7f       	andi	r24, 0xFB	; 251
 2a2:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2a6:	27 96       	adiw	r28, 0x07	; 7
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 2b8:	29 2f       	mov	r18, r25
 2ba:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2bc:	22 30       	cpi	r18, 0x02	; 2
 2be:	31 05       	cpc	r19, r1
 2c0:	59 f0       	breq	.+22     	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x20>
 2c2:	23 30       	cpi	r18, 0x03	; 3
 2c4:	31 05       	cpc	r19, r1
 2c6:	69 f0       	breq	.+26     	; 0x2e2 <CALLBACK_USB_GetDescriptor+0x2a>
 2c8:	21 30       	cpi	r18, 0x01	; 1
 2ca:	31 05       	cpc	r19, r1
 2cc:	29 f5       	brne	.+74     	; 0x318 <__stack+0x19>
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 2ce:	82 e1       	ldi	r24, 0x12	; 18
 2d0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
 2d2:	2e eb       	ldi	r18, 0xBE	; 190
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	24 c0       	rjmp	.+72     	; 0x320 <__stack+0x21>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2d8:	82 e1       	ldi	r24, 0x12	; 18
 2da:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
 2dc:	2c ea       	ldi	r18, 0xAC	; 172
 2de:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <__stack+0x21>
 2e2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	71 f0       	breq	.+28     	; 0x306 <__stack+0x7>
 2ea:	2c f4       	brge	.+10     	; 0x2f6 <CALLBACK_USB_GetDescriptor+0x3e>
 2ec:	89 2b       	or	r24, r25
 2ee:	a1 f4       	brne	.+40     	; 0x318 <__stack+0x19>
			{
				case STRING_ID_Language:
					Address = &RelayBoard_LanguageString;
					Size    = pgm_read_byte(&RelayBoard_LanguageString.Header.Size);
 2f0:	e8 ea       	ldi	r30, 0xA8	; 168
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <__stack+0x11>
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	91 05       	cpc	r25, r1
 2fa:	41 f0       	breq	.+16     	; 0x30c <__stack+0xd>
 2fc:	03 97       	sbiw	r24, 0x03	; 3
 2fe:	61 f4       	brne	.+24     	; 0x318 <__stack+0x19>
					Address = &RelayBoard_ProductString;
					Size    = pgm_read_byte(&RelayBoard_ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &RelayBoard_SerialString;
					Size    = pgm_read_byte(&RelayBoard_SerialString.Header.Size);
 300:	e4 e7       	ldi	r30, 0x74	; 116
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	05 c0       	rjmp	.+10     	; 0x310 <__stack+0x11>
					Address = &RelayBoard_LanguageString;
					Size    = pgm_read_byte(&RelayBoard_LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &RelayBoard_ManufacturerString;
					Size    = pgm_read_byte(&RelayBoard_ManufacturerString.Header.Size);
 306:	ea e9       	ldi	r30, 0x9A	; 154
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__stack+0x11>
					break;
				case STRING_ID_Product:
					Address = &RelayBoard_ProductString;
					Size    = pgm_read_byte(&RelayBoard_ProductString.Header.Size);
 30c:	e2 e8       	ldi	r30, 0x82	; 130
 30e:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Serial:
					Address = &RelayBoard_SerialString;
					Size    = pgm_read_byte(&RelayBoard_SerialString.Header.Size);
 310:	84 91       	lpm	r24, Z
 312:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Product:
					Address = &RelayBoard_ProductString;
					Size    = pgm_read_byte(&RelayBoard_ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &RelayBoard_SerialString;
 314:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&RelayBoard_SerialString.Header.Size);
					break;
 316:	04 c0       	rjmp	.+8      	; 0x320 <__stack+0x21>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 320:	fa 01       	movw	r30, r20
 322:	31 83       	std	Z+1, r19	; 0x01
 324:	20 83       	st	Z, r18
	return Size;
}
 326:	08 95       	ret

00000328 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 328:	20 91 0a 01 	lds	r18, 0x010A
 32c:	30 91 0b 01 	lds	r19, 0x010B
 330:	26 17       	cp	r18, r22
 332:	37 07       	cpc	r19, r23
 334:	48 f0       	brcs	.+18     	; 0x348 <Endpoint_Write_Control_Stream_LE+0x20>
 336:	61 15       	cp	r22, r1
 338:	71 05       	cpc	r23, r1
 33a:	39 f4       	brne	.+14     	; 0x34a <Endpoint_Write_Control_Stream_LE+0x22>
 33c:	20 91 e8 00 	lds	r18, 0x00E8
 340:	2e 7f       	andi	r18, 0xFE	; 254
 342:	20 93 e8 00 	sts	0x00E8, r18
 346:	01 c0       	rjmp	.+2      	; 0x34a <Endpoint_Write_Control_Stream_LE+0x22>
 348:	b9 01       	movw	r22, r18
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	79 f1       	breq	.+94     	; 0x3b0 <Endpoint_Write_Control_Stream_LE+0x88>
 352:	2e b3       	in	r18, 0x1e	; 30
 354:	22 23       	and	r18, r18
 356:	f1 f1       	breq	.+124    	; 0x3d4 <Endpoint_Write_Control_Stream_LE+0xac>
 358:	25 30       	cpi	r18, 0x05	; 5
 35a:	f1 f1       	breq	.+124    	; 0x3d8 <Endpoint_Write_Control_Stream_LE+0xb0>
 35c:	20 91 e8 00 	lds	r18, 0x00E8
 360:	23 fd       	sbrc	r18, 3
 362:	3c c0       	rjmp	.+120    	; 0x3dc <Endpoint_Write_Control_Stream_LE+0xb4>
 364:	20 91 e8 00 	lds	r18, 0x00E8
 368:	22 fd       	sbrc	r18, 2
 36a:	2e c0       	rjmp	.+92     	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0xa0>
 36c:	20 91 e8 00 	lds	r18, 0x00E8
 370:	20 ff       	sbrs	r18, 0
 372:	ec cf       	rjmp	.-40     	; 0x34c <Endpoint_Write_Control_Stream_LE+0x24>
 374:	20 91 f2 00 	lds	r18, 0x00F2
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	cf 01       	movw	r24, r30
 37e:	61 15       	cp	r22, r1
 380:	71 05       	cpc	r23, r1
 382:	59 f0       	breq	.+22     	; 0x39a <Endpoint_Write_Control_Stream_LE+0x72>
 384:	28 30       	cpi	r18, 0x08	; 8
 386:	31 05       	cpc	r19, r1
 388:	40 f4       	brcc	.+16     	; 0x39a <Endpoint_Write_Control_Stream_LE+0x72>
 38a:	81 91       	ld	r24, Z+
 38c:	80 93 f1 00 	sts	0x00F1, r24
 390:	61 50       	subi	r22, 0x01	; 1
 392:	71 09       	sbc	r23, r1
 394:	2f 5f       	subi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	f1 cf       	rjmp	.-30     	; 0x37c <Endpoint_Write_Control_Stream_LE+0x54>
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	28 30       	cpi	r18, 0x08	; 8
 39e:	31 05       	cpc	r19, r1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <Endpoint_Write_Control_Stream_LE+0x7c>
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	20 91 e8 00 	lds	r18, 0x00E8
 3a8:	2e 7f       	andi	r18, 0xFE	; 254
 3aa:	20 93 e8 00 	sts	0x00E8, r18
 3ae:	ce cf       	rjmp	.-100    	; 0x34c <Endpoint_Write_Control_Stream_LE+0x24>
 3b0:	41 11       	cpse	r20, r1
 3b2:	cf cf       	rjmp	.-98     	; 0x352 <Endpoint_Write_Control_Stream_LE+0x2a>
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <Endpoint_Write_Control_Stream_LE+0xa0>
 3b6:	8e b3       	in	r24, 0x1e	; 30
 3b8:	88 23       	and	r24, r24
 3ba:	61 f0       	breq	.+24     	; 0x3d4 <Endpoint_Write_Control_Stream_LE+0xac>
 3bc:	85 30       	cpi	r24, 0x05	; 5
 3be:	61 f0       	breq	.+24     	; 0x3d8 <Endpoint_Write_Control_Stream_LE+0xb0>
 3c0:	80 91 e8 00 	lds	r24, 0x00E8
 3c4:	83 fd       	sbrc	r24, 3
 3c6:	0a c0       	rjmp	.+20     	; 0x3dc <Endpoint_Write_Control_Stream_LE+0xb4>
 3c8:	80 91 e8 00 	lds	r24, 0x00E8
 3cc:	82 ff       	sbrs	r24, 2
 3ce:	f3 cf       	rjmp	.-26     	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0x8e>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	08 95       	ret
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	08 95       	ret
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret

000003e0 <Endpoint_Read_Control_Stream_LE>:
 3e0:	61 15       	cp	r22, r1
 3e2:	71 05       	cpc	r23, r1
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <Endpoint_Read_Control_Stream_LE+0x10>
 3e6:	20 91 e8 00 	lds	r18, 0x00E8
 3ea:	2b 7f       	andi	r18, 0xFB	; 251
 3ec:	20 93 e8 00 	sts	0x00E8, r18
 3f0:	fc 01       	movw	r30, r24
 3f2:	61 15       	cp	r22, r1
 3f4:	71 05       	cpc	r23, r1
 3f6:	11 f1       	breq	.+68     	; 0x43c <Endpoint_Read_Control_Stream_LE+0x5c>
 3f8:	8e b3       	in	r24, 0x1e	; 30
 3fa:	88 23       	and	r24, r24
 3fc:	39 f1       	breq	.+78     	; 0x44c <Endpoint_Read_Control_Stream_LE+0x6c>
 3fe:	85 30       	cpi	r24, 0x05	; 5
 400:	39 f1       	breq	.+78     	; 0x450 <Endpoint_Read_Control_Stream_LE+0x70>
 402:	80 91 e8 00 	lds	r24, 0x00E8
 406:	83 fd       	sbrc	r24, 3
 408:	1f c0       	rjmp	.+62     	; 0x448 <Endpoint_Read_Control_Stream_LE+0x68>
 40a:	80 91 e8 00 	lds	r24, 0x00E8
 40e:	82 ff       	sbrs	r24, 2
 410:	f0 cf       	rjmp	.-32     	; 0x3f2 <Endpoint_Read_Control_Stream_LE+0x12>
 412:	80 91 f2 00 	lds	r24, 0x00F2
 416:	88 23       	and	r24, r24
 418:	31 f0       	breq	.+12     	; 0x426 <Endpoint_Read_Control_Stream_LE+0x46>
 41a:	80 91 f1 00 	lds	r24, 0x00F1
 41e:	81 93       	st	Z+, r24
 420:	61 50       	subi	r22, 0x01	; 1
 422:	71 09       	sbc	r23, r1
 424:	b1 f7       	brne	.-20     	; 0x412 <Endpoint_Read_Control_Stream_LE+0x32>
 426:	80 91 e8 00 	lds	r24, 0x00E8
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	80 93 e8 00 	sts	0x00E8, r24
 430:	e0 cf       	rjmp	.-64     	; 0x3f2 <Endpoint_Read_Control_Stream_LE+0x12>
 432:	8e b3       	in	r24, 0x1e	; 30
 434:	88 23       	and	r24, r24
 436:	51 f0       	breq	.+20     	; 0x44c <Endpoint_Read_Control_Stream_LE+0x6c>
 438:	85 30       	cpi	r24, 0x05	; 5
 43a:	51 f0       	breq	.+20     	; 0x450 <Endpoint_Read_Control_Stream_LE+0x70>
 43c:	80 91 e8 00 	lds	r24, 0x00E8
 440:	80 ff       	sbrs	r24, 0
 442:	f7 cf       	rjmp	.-18     	; 0x432 <Endpoint_Read_Control_Stream_LE+0x52>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	08 95       	ret
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	08 95       	ret

00000454 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 454:	20 91 0a 01 	lds	r18, 0x010A
 458:	30 91 0b 01 	lds	r19, 0x010B
 45c:	26 17       	cp	r18, r22
 45e:	37 07       	cpc	r19, r23
 460:	48 f0       	brcs	.+18     	; 0x474 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 462:	61 15       	cp	r22, r1
 464:	71 05       	cpc	r23, r1
 466:	39 f4       	brne	.+14     	; 0x476 <Endpoint_Write_Control_PStream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 468:	20 91 e8 00 	lds	r18, 0x00E8
 46c:	2e 7f       	andi	r18, 0xFE	; 254
 46e:	20 93 e8 00 	sts	0x00E8, r18
 472:	01 c0       	rjmp	.+2      	; 0x476 <Endpoint_Write_Control_PStream_LE+0x22>
 474:	b9 01       	movw	r22, r18
 476:	fc 01       	movw	r30, r24
 478:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 47a:	61 15       	cp	r22, r1
 47c:	71 05       	cpc	r23, r1
 47e:	61 f1       	breq	.+88     	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 480:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 482:	88 23       	and	r24, r24
 484:	d9 f1       	breq	.+118    	; 0x4fc <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 486:	85 30       	cpi	r24, 0x05	; 5
 488:	d9 f1       	breq	.+118    	; 0x500 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 48a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 48e:	83 fd       	sbrc	r24, 3
 490:	39 c0       	rjmp	.+114    	; 0x504 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 492:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 496:	82 fd       	sbrc	r24, 2
 498:	2b c0       	rjmp	.+86     	; 0x4f0 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 49a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 49e:	80 ff       	sbrs	r24, 0
 4a0:	ec cf       	rjmp	.-40     	; 0x47a <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 4a2:	80 91 f2 00 	lds	r24, 0x00F2
 4a6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4a8:	61 15       	cp	r22, r1
 4aa:	71 05       	cpc	r23, r1
 4ac:	59 f0       	breq	.+22     	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x70>
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	91 05       	cpc	r25, r1
 4b2:	40 f4       	brcc	.+16     	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4b4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4b6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4ba:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4bc:	61 50       	subi	r22, 0x01	; 1
 4be:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	f2 cf       	rjmp	.-28     	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	08 97       	sbiw	r24, 0x08	; 8
 4c8:	09 f0       	breq	.+2      	; 0x4cc <Endpoint_Write_Control_PStream_LE+0x78>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 4cc:	80 91 e8 00 	lds	r24, 0x00E8
 4d0:	8e 7f       	andi	r24, 0xFE	; 254
 4d2:	80 93 e8 00 	sts	0x00E8, r24
 4d6:	d1 cf       	rjmp	.-94     	; 0x47a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4d8:	21 11       	cpse	r18, r1
 4da:	d2 cf       	rjmp	.-92     	; 0x480 <Endpoint_Write_Control_PStream_LE+0x2c>
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4de:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4e0:	88 23       	and	r24, r24
 4e2:	61 f0       	breq	.+24     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4e4:	85 30       	cpi	r24, 0x05	; 5
 4e6:	61 f0       	breq	.+24     	; 0x500 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4ec:	83 fd       	sbrc	r24, 3
 4ee:	0a c0       	rjmp	.+20     	; 0x504 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4f0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4f4:	82 ff       	sbrs	r24, 2
 4f6:	f3 cf       	rjmp	.-26     	; 0x4de <Endpoint_Write_Control_PStream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 504:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 506:	08 95       	ret

00000508 <Endpoint_ConfigureEndpoint_Prv>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 508:	eb ee       	ldi	r30, 0xEB	; 235
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	80 83       	st	Z, r24
 512:	ed ee       	ldi	r30, 0xED	; 237
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	10 82       	st	Z, r1
 518:	60 93 ec 00 	sts	0x00EC, r22
 51c:	40 83       	st	Z, r20
 51e:	80 91 ee 00 	lds	r24, 0x00EE
 522:	88 1f       	adc	r24, r24
 524:	88 27       	eor	r24, r24
 526:	88 1f       	adc	r24, r24
 528:	08 95       	ret

0000052a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 52a:	80 91 04 01 	lds	r24, 0x0104
 52e:	87 ff       	sbrs	r24, 7
 530:	0f c0       	rjmp	.+30     	; 0x550 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 532:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 536:	82 fd       	sbrc	r24, 2
 538:	04 c0       	rjmp	.+8      	; 0x542 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 53a:	8e b3       	in	r24, 0x1e	; 30
 53c:	81 11       	cpse	r24, r1
 53e:	f9 cf       	rjmp	.-14     	; 0x532 <Endpoint_ClearStatusStage+0x8>
 540:	10 c0       	rjmp	.+32     	; 0x562 <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 542:	80 91 e8 00 	lds	r24, 0x00E8
 546:	8b 7f       	andi	r24, 0xFB	; 251
 548:	0a c0       	rjmp	.+20     	; 0x55e <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 54a:	8e b3       	in	r24, 0x1e	; 30
 54c:	88 23       	and	r24, r24
 54e:	49 f0       	breq	.+18     	; 0x562 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 550:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 554:	80 ff       	sbrs	r24, 0
 556:	f9 cf       	rjmp	.-14     	; 0x54a <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 558:	80 91 e8 00 	lds	r24, 0x00E8
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	80 93 e8 00 	sts	0x00E8, r24
 562:	08 95       	ret

00000564 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 564:	3f d0       	rcall	.+126    	; 0x5e4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 566:	41 d0       	rcall	.+130    	; 0x5ea <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 568:	80 91 d8 00 	lds	r24, 0x00D8
 56c:	8f 77       	andi	r24, 0x7F	; 127
 56e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 572:	80 91 d8 00 	lds	r24, 0x00D8
 576:	80 68       	ori	r24, 0x80	; 128
 578:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 57c:	80 91 d8 00 	lds	r24, 0x00D8
 580:	8f 7d       	andi	r24, 0xDF	; 223
 582:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 586:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 58c:	09 b4       	in	r0, 0x29	; 41
 58e:	00 fe       	sbrs	r0, 0
 590:	fd cf       	rjmp	.-6      	; 0x58c <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 592:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 594:	10 92 00 01 	sts	0x0100, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 598:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 59c:	10 92 01 01 	sts	0x0101, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5a0:	42 e0       	ldi	r20, 0x02	; 2
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	b0 df       	rcall	.-160    	; 0x508 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5a8:	80 91 e1 00 	lds	r24, 0x00E1
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5b2:	80 91 e2 00 	lds	r24, 0x00E2
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5bc:	80 91 e2 00 	lds	r24, 0x00E2
 5c0:	88 60       	ori	r24, 0x08	; 8
 5c2:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5c6:	80 91 e0 00 	lds	r24, 0x00E0
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	80 93 e0 00 	sts	0x00E0, r24
 5d0:	08 95       	ret

000005d2 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 5d2:	e3 e6       	ldi	r30, 0x63	; 99
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	8e 7f       	andi	r24, 0xFE	; 254
 5da:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 03 01 	sts	0x0103, r24

	USB_ResetInterface();
 5e2:	c0 cf       	rjmp	.-128    	; 0x564 <USB_ResetInterface>

000005e4 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5e4:	10 92 e2 00 	sts	0x00E2, r1
 5e8:	08 95       	ret

000005ea <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 5ea:	10 92 e1 00 	sts	0x00E1, r1
 5ee:	08 95       	ret

000005f0 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 612:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 616:	82 ff       	sbrs	r24, 2
 618:	0a c0       	rjmp	.+20     	; 0x62e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 61a:	80 91 e2 00 	lds	r24, 0x00E2
 61e:	82 ff       	sbrs	r24, 2
 620:	06 c0       	rjmp	.+12     	; 0x62e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 622:	80 91 e1 00 	lds	r24, 0x00E1
 626:	8b 7f       	andi	r24, 0xFB	; 251
 628:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 62c:	97 d1       	rcall	.+814    	; 0x95c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 62e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 632:	80 ff       	sbrs	r24, 0
 634:	16 c0       	rjmp	.+44     	; 0x662 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 636:	80 91 e2 00 	lds	r24, 0x00E2
 63a:	80 ff       	sbrs	r24, 0
 63c:	12 c0       	rjmp	.+36     	; 0x662 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 63e:	80 91 e2 00 	lds	r24, 0x00E2
 642:	8e 7f       	andi	r24, 0xFE	; 254
 644:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 648:	80 91 e2 00 	lds	r24, 0x00E2
 64c:	80 61       	ori	r24, 0x10	; 16
 64e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 652:	80 91 d8 00 	lds	r24, 0x00D8
 656:	80 62       	ori	r24, 0x20	; 32
 658:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 65c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 65e:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 660:	7d d1       	rcall	.+762    	; 0x95c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 662:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 666:	84 ff       	sbrs	r24, 4
 668:	2d c0       	rjmp	.+90     	; 0x6c4 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 66a:	80 91 e2 00 	lds	r24, 0x00E2
 66e:	84 ff       	sbrs	r24, 4
 670:	29 c0       	rjmp	.+82     	; 0x6c4 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 672:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 678:	09 b4       	in	r0, 0x29	; 41
 67a:	00 fe       	sbrs	r0, 0
 67c:	fd cf       	rjmp	.-6      	; 0x678 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 67e:	80 91 d8 00 	lds	r24, 0x00D8
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 688:	80 91 e1 00 	lds	r24, 0x00E1
 68c:	8f 7e       	andi	r24, 0xEF	; 239
 68e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 692:	80 91 e2 00 	lds	r24, 0x00E2
 696:	8f 7e       	andi	r24, 0xEF	; 239
 698:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 69c:	80 91 e2 00 	lds	r24, 0x00E2
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6a6:	80 91 00 01 	lds	r24, 0x0100
 6aa:	88 23       	and	r24, r24
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__vector_11+0xc2>
		  USB_DeviceState = DEVICE_STATE_Configured;
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__vector_11+0xd0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6b2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6b6:	87 fd       	sbrc	r24, 7
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <__vector_11+0xce>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <__vector_11+0xd0>
 6be:	83 e0       	ldi	r24, 0x03	; 3
 6c0:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 6c2:	4c d1       	rcall	.+664    	; 0x95c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6c4:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6c8:	83 ff       	sbrs	r24, 3
 6ca:	21 c0       	rjmp	.+66     	; 0x70e <__vector_11+0x11e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6cc:	80 91 e2 00 	lds	r24, 0x00E2
 6d0:	83 ff       	sbrs	r24, 3
 6d2:	1d c0       	rjmp	.+58     	; 0x70e <__vector_11+0x11e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6d4:	80 91 e1 00 	lds	r24, 0x00E1
 6d8:	87 7f       	andi	r24, 0xF7	; 247
 6da:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 6e2:	10 92 00 01 	sts	0x0100, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6e6:	80 91 e1 00 	lds	r24, 0x00E1
 6ea:	8e 7f       	andi	r24, 0xFE	; 254
 6ec:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6f0:	80 91 e2 00 	lds	r24, 0x00E2
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6fa:	80 91 e2 00 	lds	r24, 0x00E2
 6fe:	80 61       	ori	r24, 0x10	; 16
 700:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 704:	42 e0       	ldi	r20, 0x02	; 2
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	fe de       	rcall	.-516    	; 0x508 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 70c:	27 d1       	rcall	.+590    	; 0x95c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 70e:	ff 91       	pop	r31
 710:	ef 91       	pop	r30
 712:	bf 91       	pop	r27
 714:	af 91       	pop	r26
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	7f 91       	pop	r23
 71c:	6f 91       	pop	r22
 71e:	5f 91       	pop	r21
 720:	4f 91       	pop	r20
 722:	3f 91       	pop	r19
 724:	2f 91       	pop	r18
 726:	0f 90       	pop	r0
 728:	0f be       	out	0x3f, r0	; 63
 72a:	0f 90       	pop	r0
 72c:	1f 90       	pop	r1
 72e:	18 95       	reti

00000730 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	aa 97       	sbiw	r28, 0x2a	; 42
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
 746:	e4 e0       	ldi	r30, 0x04	; 4
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	88 e0       	ldi	r24, 0x08	; 8
 74c:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 74e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 752:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 754:	8e 13       	cpse	r24, r30
 756:	fb cf       	rjmp	.-10     	; 0x74e <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 758:	fa dc       	rcall	.-1548   	; 0x14e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 75a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 75e:	83 ff       	sbrs	r24, 3
 760:	e5 c0       	rjmp	.+458    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 762:	80 91 04 01 	lds	r24, 0x0104

		switch (USB_ControlRequest.bRequest)
 766:	90 91 05 01 	lds	r25, 0x0105
 76a:	95 30       	cpi	r25, 0x05	; 5
 76c:	09 f4       	brne	.+2      	; 0x770 <USB_Device_ProcessControlRequest+0x40>
 76e:	3c c0       	rjmp	.+120    	; 0x7e8 <USB_Device_ProcessControlRequest+0xb8>
 770:	30 f4       	brcc	.+12     	; 0x77e <USB_Device_ProcessControlRequest+0x4e>
 772:	91 30       	cpi	r25, 0x01	; 1
 774:	29 f1       	breq	.+74     	; 0x7c0 <USB_Device_ProcessControlRequest+0x90>
 776:	68 f0       	brcs	.+26     	; 0x792 <USB_Device_ProcessControlRequest+0x62>
 778:	93 30       	cpi	r25, 0x03	; 3
 77a:	11 f1       	breq	.+68     	; 0x7c0 <USB_Device_ProcessControlRequest+0x90>
 77c:	d7 c0       	rjmp	.+430    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
 77e:	98 30       	cpi	r25, 0x08	; 8
 780:	09 f4       	brne	.+2      	; 0x784 <USB_Device_ProcessControlRequest+0x54>
 782:	a7 c0       	rjmp	.+334    	; 0x8d2 <USB_Device_ProcessControlRequest+0x1a2>
 784:	99 30       	cpi	r25, 0x09	; 9
 786:	09 f4       	brne	.+2      	; 0x78a <USB_Device_ProcessControlRequest+0x5a>
 788:	b6 c0       	rjmp	.+364    	; 0x8f6 <USB_Device_ProcessControlRequest+0x1c6>
 78a:	96 30       	cpi	r25, 0x06	; 6
 78c:	09 f0       	breq	.+2      	; 0x790 <USB_Device_ProcessControlRequest+0x60>
 78e:	ce c0       	rjmp	.+412    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
 790:	4c c0       	rjmp	.+152    	; 0x82a <USB_Device_ProcessControlRequest+0xfa>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 792:	80 38       	cpi	r24, 0x80	; 128
 794:	29 f0       	breq	.+10     	; 0x7a0 <USB_Device_ProcessControlRequest+0x70>
 796:	82 38       	cpi	r24, 0x82	; 130
 798:	09 f0       	breq	.+2      	; 0x79c <USB_Device_ProcessControlRequest+0x6c>
 79a:	c8 c0       	rjmp	.+400    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <USB_Device_ProcessControlRequest+0x7c>
 7a0:	80 91 01 01 	lds	r24, 0x0101
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 7a4:	90 91 02 01 	lds	r25, 0x0102
 7a8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7aa:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7ac:	90 91 e8 00 	lds	r25, 0x00E8
 7b0:	97 7f       	andi	r25, 0xF7	; 247
 7b2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 7b6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 7ba:	10 92 f1 00 	sts	0x00F1, r1
 7be:	94 c0       	rjmp	.+296    	; 0x8e8 <USB_Device_ProcessControlRequest+0x1b8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7c0:	28 2f       	mov	r18, r24
 7c2:	2d 7f       	andi	r18, 0xFD	; 253
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <USB_Device_ProcessControlRequest+0x98>
 7c6:	b2 c0       	rjmp	.+356    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7c8:	81 11       	cpse	r24, r1
 7ca:	b0 c0       	rjmp	.+352    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7cc:	80 91 06 01 	lds	r24, 0x0106
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <USB_Device_ProcessControlRequest+0xa6>
 7d4:	ab c0       	rjmp	.+342    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7d6:	93 30       	cpi	r25, 0x03	; 3
 7d8:	09 f0       	breq	.+2      	; 0x7dc <USB_Device_ProcessControlRequest+0xac>
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	80 93 02 01 	sts	0x0102, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7e0:	80 91 e8 00 	lds	r24, 0x00E8
 7e4:	87 7f       	andi	r24, 0xF7	; 247
 7e6:	83 c0       	rjmp	.+262    	; 0x8ee <USB_Device_ProcessControlRequest+0x1be>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 7e8:	81 11       	cpse	r24, r1
 7ea:	a0 c0       	rjmp	.+320    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 7ec:	10 91 06 01 	lds	r17, 0x0106
 7f0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 7f2:	80 91 e3 00 	lds	r24, 0x00E3
 7f6:	80 78       	andi	r24, 0x80	; 128
 7f8:	81 2b       	or	r24, r17
 7fa:	80 93 e3 00 	sts	0x00E3, r24
 7fe:	80 91 e8 00 	lds	r24, 0x00E8
 802:	87 7f       	andi	r24, 0xF7	; 247
 804:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 808:	90 de       	rcall	.-736    	; 0x52a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 80a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 80e:	80 ff       	sbrs	r24, 0
 810:	fc cf       	rjmp	.-8      	; 0x80a <USB_Device_ProcessControlRequest+0xda>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 812:	80 91 e3 00 	lds	r24, 0x00E3
 816:	80 68       	ori	r24, 0x80	; 128
 818:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 81c:	11 11       	cpse	r17, r1
 81e:	02 c0       	rjmp	.+4      	; 0x824 <USB_Device_ProcessControlRequest+0xf4>
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	01 c0       	rjmp	.+2      	; 0x826 <USB_Device_ProcessControlRequest+0xf6>
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	8e bb       	out	0x1e, r24	; 30
 828:	81 c0       	rjmp	.+258    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 82a:	80 58       	subi	r24, 0x80	; 128
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	08 f0       	brcs	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0x102>
 830:	7d c0       	rjmp	.+250    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 832:	80 91 06 01 	lds	r24, 0x0106
 836:	90 91 07 01 	lds	r25, 0x0107
 83a:	8c 3d       	cpi	r24, 0xDC	; 220
 83c:	23 e0       	ldi	r18, 0x03	; 3
 83e:	92 07       	cpc	r25, r18
 840:	71 f5       	brne	.+92     	; 0x89e <USB_Device_ProcessControlRequest+0x16e>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 846:	8a e2       	ldi	r24, 0x2A	; 42
 848:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 84a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 84c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 84e:	de 01       	movw	r26, r28
 850:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 852:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 854:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 856:	51 e2       	ldi	r21, 0x21	; 33
 858:	e3 2f       	mov	r30, r19
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	50 93 57 00 	sts	0x0057, r21
 860:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 862:	20 ff       	sbrs	r18, 0
 864:	03 c0       	rjmp	.+6      	; 0x86c <USB_Device_ProcessControlRequest+0x13c>
					{
						SerialByte >>= 4;
 866:	e2 95       	swap	r30
 868:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 86a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 86c:	ef 70       	andi	r30, 0x0F	; 15
 86e:	8e 2f       	mov	r24, r30
 870:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 872:	ea 30       	cpi	r30, 0x0A	; 10
 874:	10 f0       	brcs	.+4      	; 0x87a <USB_Device_ProcessControlRequest+0x14a>
 876:	c7 96       	adiw	r24, 0x37	; 55
 878:	01 c0       	rjmp	.+2      	; 0x87c <USB_Device_ProcessControlRequest+0x14c>
 87a:	c0 96       	adiw	r24, 0x30	; 48
 87c:	8d 93       	st	X+, r24
 87e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 880:	2f 5f       	subi	r18, 0xFF	; 255
 882:	24 31       	cpi	r18, 0x14	; 20
 884:	49 f7       	brne	.-46     	; 0x858 <USB_Device_ProcessControlRequest+0x128>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 886:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 888:	80 91 e8 00 	lds	r24, 0x00E8
 88c:	87 7f       	andi	r24, 0xF7	; 247
 88e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 892:	6a e2       	ldi	r22, 0x2A	; 42
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	ce 01       	movw	r24, r28
 898:	01 96       	adiw	r24, 0x01	; 1
 89a:	46 dd       	rcall	.-1396   	; 0x328 <Endpoint_Write_Control_Stream_LE>
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <USB_Device_ProcessControlRequest+0x196>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 89e:	60 91 08 01 	lds	r22, 0x0108
 8a2:	70 91 09 01 	lds	r23, 0x0109
 8a6:	ae 01       	movw	r20, r28
 8a8:	4f 5f       	subi	r20, 0xFF	; 255
 8aa:	5f 4f       	sbci	r21, 0xFF	; 255
 8ac:	05 dd       	rcall	.-1526   	; 0x2b8 <CALLBACK_USB_GetDescriptor>
 8ae:	bc 01       	movw	r22, r24
 8b0:	89 2b       	or	r24, r25
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <USB_Device_ProcessControlRequest+0x186>
 8b4:	3b c0       	rjmp	.+118    	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
 8b6:	90 91 e8 00 	lds	r25, 0x00E8
 8ba:	97 7f       	andi	r25, 0xF7	; 247
 8bc:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	9a 81       	ldd	r25, Y+2	; 0x02
 8c4:	c7 dd       	rcall	.-1138   	; 0x454 <Endpoint_Write_Control_PStream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 8c6:	80 91 e8 00 	lds	r24, 0x00E8
 8ca:	8b 7f       	andi	r24, 0xFB	; 251
 8cc:	80 93 e8 00 	sts	0x00E8, r24
 8d0:	2d c0       	rjmp	.+90     	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 8d2:	80 38       	cpi	r24, 0x80	; 128
 8d4:	59 f5       	brne	.+86     	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8d6:	80 91 e8 00 	lds	r24, 0x00E8
 8da:	87 7f       	andi	r24, 0xF7	; 247
 8dc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 8e0:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8e4:	80 93 f1 00 	sts	0x00F1, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 8e8:	80 91 e8 00 	lds	r24, 0x00E8
 8ec:	8e 7f       	andi	r24, 0xFE	; 254
 8ee:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 8f2:	1b de       	rcall	.-970    	; 0x52a <Endpoint_ClearStatusStage>
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8f6:	81 11       	cpse	r24, r1
 8f8:	19 c0       	rjmp	.+50     	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 8fa:	90 91 06 01 	lds	r25, 0x0106
 8fe:	92 30       	cpi	r25, 0x02	; 2
 900:	a8 f4       	brcc	.+42     	; 0x92c <USB_Device_ProcessControlRequest+0x1fc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 902:	80 91 e8 00 	lds	r24, 0x00E8
 906:	87 7f       	andi	r24, 0xF7	; 247
 908:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 90c:	90 93 00 01 	sts	0x0100, r25

	Endpoint_ClearStatusStage();
 910:	0c de       	rcall	.-1000   	; 0x52a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 912:	80 91 00 01 	lds	r24, 0x0100
 916:	81 11       	cpse	r24, r1
 918:	06 c0       	rjmp	.+12     	; 0x926 <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 91a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 91e:	87 fd       	sbrc	r24, 7
 920:	02 c0       	rjmp	.+4      	; 0x926 <USB_Device_ProcessControlRequest+0x1f6>
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	01 c0       	rjmp	.+2      	; 0x928 <USB_Device_ProcessControlRequest+0x1f8>
 926:	84 e0       	ldi	r24, 0x04	; 4
 928:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 92a:	18 d0       	rcall	.+48     	; 0x95c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 92c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 930:	83 ff       	sbrs	r24, 3
 932:	0a c0       	rjmp	.+20     	; 0x948 <USB_Device_ProcessControlRequest+0x218>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 934:	80 91 e8 00 	lds	r24, 0x00E8
 938:	87 7f       	andi	r24, 0xF7	; 247
 93a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 93e:	80 91 eb 00 	lds	r24, 0x00EB
 942:	80 62       	ori	r24, 0x20	; 32
 944:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 948:	aa 96       	adiw	r28, 0x2a	; 42
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	08 95       	ret

0000095c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 95c:	08 95       	ret

0000095e <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 95e:	8e b3       	in	r24, 0x1e	; 30
 960:	88 23       	and	r24, r24
 962:	21 f0       	breq	.+8      	; 0x96c <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 964:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 968:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 96a:	e2 ce       	rjmp	.-572    	; 0x730 <USB_Device_ProcessControlRequest>
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
